
Assignment_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ea4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002fb0  08002fb0  00012fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fd0  08002fd0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fd0  08002fd0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fd0  08002fd0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fd0  08002fd0  00012fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fd4  08002fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000005c  08003034  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003034  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c005  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fdf  00000000  00000000  0002c08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002e070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002eae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017491  00000000  00000000  0002f430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7e2  00000000  00000000  000468c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000845ee  00000000  00000000  000530a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7691  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e0  00000000  00000000  000d76e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f98 	.word	0x08002f98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002f98 	.word	0x08002f98

0800014c <automatic_run>:
 */

#include "automatic.h"

int status = INIT;
void automatic_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status){
 8000150:	4b80      	ldr	r3, [pc, #512]	; (8000354 <automatic_run+0x208>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b04      	cmp	r3, #4
 8000158:	f200 80ee 	bhi.w	8000338 <automatic_run+0x1ec>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <automatic_run+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000179 	.word	0x08000179
 8000168:	080001bf 	.word	0x080001bf
 800016c:	0800021f 	.word	0x0800021f
 8000170:	0800027d 	.word	0x0800027d
 8000174:	080002db 	.word	0x080002db
		case INIT:
			//tracffic 1
			HAL_GPIO_WritePin(Tracffic_1A_GPIO_Port, Tracffic_1A_Pin, GPIO_PIN_RESET);
 8000178:	2200      	movs	r2, #0
 800017a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800017e:	4876      	ldr	r0, [pc, #472]	; (8000358 <automatic_run+0x20c>)
 8000180:	f001 fb7f 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_1B_GPIO_Port, Tracffic_1B_Pin, GPIO_PIN_RESET);
 8000184:	2200      	movs	r2, #0
 8000186:	2108      	movs	r1, #8
 8000188:	4874      	ldr	r0, [pc, #464]	; (800035c <automatic_run+0x210>)
 800018a:	f001 fb7a 	bl	8001882 <HAL_GPIO_WritePin>
			//tracffic 2
			HAL_GPIO_WritePin(Tracffic_2A_GPIO_Port, Tracffic_2A_Pin, GPIO_PIN_RESET);
 800018e:	2200      	movs	r2, #0
 8000190:	2120      	movs	r1, #32
 8000192:	4872      	ldr	r0, [pc, #456]	; (800035c <automatic_run+0x210>)
 8000194:	f001 fb75 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_2B_GPIO_Port, Tracffic_2B_Pin, GPIO_PIN_RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	2110      	movs	r1, #16
 800019c:	486f      	ldr	r0, [pc, #444]	; (800035c <automatic_run+0x210>)
 800019e:	f001 fb70 	bl	8001882 <HAL_GPIO_WritePin>
			if(timer1_flag == 1){
 80001a2:	4b6f      	ldr	r3, [pc, #444]	; (8000360 <automatic_run+0x214>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	2b01      	cmp	r3, #1
 80001a8:	f040 80c8 	bne.w	800033c <automatic_run+0x1f0>
				status = AUTO_RED_3s;
 80001ac:	4b69      	ldr	r3, [pc, #420]	; (8000354 <automatic_run+0x208>)
 80001ae:	2202      	movs	r2, #2
 80001b0:	601a      	str	r2, [r3, #0]
				setTimer1(time_green);
 80001b2:	4b6c      	ldr	r3, [pc, #432]	; (8000364 <automatic_run+0x218>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4618      	mov	r0, r3
 80001b8:	f000 fe96 	bl	8000ee8 <setTimer1>
			}
			//sau 1s se doi trang thai
			break;
 80001bc:	e0be      	b.n	800033c <automatic_run+0x1f0>
		case AUTO_RED_3s:
			//tracffic 1 do
			HAL_GPIO_WritePin(Tracffic_1A_GPIO_Port, Tracffic_1A_Pin, GPIO_PIN_SET);
 80001be:	2201      	movs	r2, #1
 80001c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001c4:	4864      	ldr	r0, [pc, #400]	; (8000358 <automatic_run+0x20c>)
 80001c6:	f001 fb5c 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_1B_GPIO_Port, Tracffic_1B_Pin, GPIO_PIN_RESET);
 80001ca:	2200      	movs	r2, #0
 80001cc:	2108      	movs	r1, #8
 80001ce:	4863      	ldr	r0, [pc, #396]	; (800035c <automatic_run+0x210>)
 80001d0:	f001 fb57 	bl	8001882 <HAL_GPIO_WritePin>
			//tracffic 2 xanh
			HAL_GPIO_WritePin(Tracffic_2A_GPIO_Port, Tracffic_2A_Pin, GPIO_PIN_RESET);
 80001d4:	2200      	movs	r2, #0
 80001d6:	2120      	movs	r1, #32
 80001d8:	4860      	ldr	r0, [pc, #384]	; (800035c <automatic_run+0x210>)
 80001da:	f001 fb52 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_2B_GPIO_Port, Tracffic_2B_Pin, GPIO_PIN_SET);
 80001de:	2201      	movs	r2, #1
 80001e0:	2110      	movs	r1, #16
 80001e2:	485e      	ldr	r0, [pc, #376]	; (800035c <automatic_run+0x210>)
 80001e4:	f001 fb4d 	bl	8001882 <HAL_GPIO_WritePin>

			if(timer1_flag == 1){
 80001e8:	4b5d      	ldr	r3, [pc, #372]	; (8000360 <automatic_run+0x214>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	2b01      	cmp	r3, #1
 80001ee:	d107      	bne.n	8000200 <automatic_run+0xb4>
				status = AUTO_RED_2s;
 80001f0:	4b58      	ldr	r3, [pc, #352]	; (8000354 <automatic_run+0x208>)
 80001f2:	2203      	movs	r2, #3
 80001f4:	601a      	str	r2, [r3, #0]
				setTimer1(time_yellow);
 80001f6:	4b5c      	ldr	r3, [pc, #368]	; (8000368 <automatic_run+0x21c>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 fe74 	bl	8000ee8 <setTimer1>
			}
			if(is_button_Pressed(0)) {
 8000200:	2000      	movs	r0, #0
 8000202:	f000 f8b3 	bl	800036c <is_button_Pressed>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	f000 8099 	beq.w	8000340 <automatic_run+0x1f4>
				status = MAN_RED_GREEN ;
 800020e:	4b51      	ldr	r3, [pc, #324]	; (8000354 <automatic_run+0x208>)
 8000210:	220a      	movs	r2, #10
 8000212:	601a      	str	r2, [r3, #0]
				setTimer4(TIME_BACK_AUTO) ;
 8000214:	f242 7010 	movw	r0, #10000	; 0x2710
 8000218:	f000 fe7a 	bl	8000f10 <setTimer4>
			}
			break;
 800021c:	e090      	b.n	8000340 <automatic_run+0x1f4>
		case AUTO_RED_2s:
			//tracffic 1 do
			HAL_GPIO_WritePin(Tracffic_1A_GPIO_Port, Tracffic_1A_Pin, GPIO_PIN_SET);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000224:	484c      	ldr	r0, [pc, #304]	; (8000358 <automatic_run+0x20c>)
 8000226:	f001 fb2c 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_1B_GPIO_Port, Tracffic_1B_Pin, GPIO_PIN_RESET);
 800022a:	2200      	movs	r2, #0
 800022c:	2108      	movs	r1, #8
 800022e:	484b      	ldr	r0, [pc, #300]	; (800035c <automatic_run+0x210>)
 8000230:	f001 fb27 	bl	8001882 <HAL_GPIO_WritePin>
			//tracffic 2 vang
			HAL_GPIO_WritePin(Tracffic_2A_GPIO_Port, Tracffic_2A_Pin, GPIO_PIN_SET);
 8000234:	2201      	movs	r2, #1
 8000236:	2120      	movs	r1, #32
 8000238:	4848      	ldr	r0, [pc, #288]	; (800035c <automatic_run+0x210>)
 800023a:	f001 fb22 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_2B_GPIO_Port, Tracffic_2B_Pin, GPIO_PIN_SET);
 800023e:	2201      	movs	r2, #1
 8000240:	2110      	movs	r1, #16
 8000242:	4846      	ldr	r0, [pc, #280]	; (800035c <automatic_run+0x210>)
 8000244:	f001 fb1d 	bl	8001882 <HAL_GPIO_WritePin>

			if(timer1_flag == 1){
 8000248:	4b45      	ldr	r3, [pc, #276]	; (8000360 <automatic_run+0x214>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2b01      	cmp	r3, #1
 800024e:	d107      	bne.n	8000260 <automatic_run+0x114>
				status = AUTO_GREEN;
 8000250:	4b40      	ldr	r3, [pc, #256]	; (8000354 <automatic_run+0x208>)
 8000252:	2204      	movs	r2, #4
 8000254:	601a      	str	r2, [r3, #0]
				setTimer1(time_green);
 8000256:	4b43      	ldr	r3, [pc, #268]	; (8000364 <automatic_run+0x218>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fe44 	bl	8000ee8 <setTimer1>
			}
			if(is_button_Pressed(0)) {
 8000260:	2000      	movs	r0, #0
 8000262:	f000 f883 	bl	800036c <is_button_Pressed>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d06b      	beq.n	8000344 <automatic_run+0x1f8>
				setTimer4(TIME_BACK_AUTO) ;
 800026c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000270:	f000 fe4e 	bl	8000f10 <setTimer4>
				status = MAN_RED_YELLOW ;
 8000274:	4b37      	ldr	r3, [pc, #220]	; (8000354 <automatic_run+0x208>)
 8000276:	220b      	movs	r2, #11
 8000278:	601a      	str	r2, [r3, #0]
			}
			break;
 800027a:	e063      	b.n	8000344 <automatic_run+0x1f8>
		case AUTO_GREEN:
			//tracffic 1 xanh
			HAL_GPIO_WritePin(Tracffic_1A_GPIO_Port, Tracffic_1A_Pin, GPIO_PIN_RESET);
 800027c:	2200      	movs	r2, #0
 800027e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000282:	4835      	ldr	r0, [pc, #212]	; (8000358 <automatic_run+0x20c>)
 8000284:	f001 fafd 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_1B_GPIO_Port, Tracffic_1B_Pin, GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2108      	movs	r1, #8
 800028c:	4833      	ldr	r0, [pc, #204]	; (800035c <automatic_run+0x210>)
 800028e:	f001 faf8 	bl	8001882 <HAL_GPIO_WritePin>
			//tracffic 2 do
			HAL_GPIO_WritePin(Tracffic_2A_GPIO_Port, Tracffic_2A_Pin, GPIO_PIN_SET);
 8000292:	2201      	movs	r2, #1
 8000294:	2120      	movs	r1, #32
 8000296:	4831      	ldr	r0, [pc, #196]	; (800035c <automatic_run+0x210>)
 8000298:	f001 faf3 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_2B_GPIO_Port, Tracffic_2B_Pin, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	2110      	movs	r1, #16
 80002a0:	482e      	ldr	r0, [pc, #184]	; (800035c <automatic_run+0x210>)
 80002a2:	f001 faee 	bl	8001882 <HAL_GPIO_WritePin>
			if(timer1_flag == 1){
 80002a6:	4b2e      	ldr	r3, [pc, #184]	; (8000360 <automatic_run+0x214>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d107      	bne.n	80002be <automatic_run+0x172>
				status = AUTO_YELLOW;
 80002ae:	4b29      	ldr	r3, [pc, #164]	; (8000354 <automatic_run+0x208>)
 80002b0:	2205      	movs	r2, #5
 80002b2:	601a      	str	r2, [r3, #0]
				setTimer1(time_yellow);
 80002b4:	4b2c      	ldr	r3, [pc, #176]	; (8000368 <automatic_run+0x21c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fe15 	bl	8000ee8 <setTimer1>
			}
			if(is_button_Pressed(0)) {
 80002be:	2000      	movs	r0, #0
 80002c0:	f000 f854 	bl	800036c <is_button_Pressed>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d03e      	beq.n	8000348 <automatic_run+0x1fc>
				status = MAN_GREEN_RED ;
 80002ca:	4b22      	ldr	r3, [pc, #136]	; (8000354 <automatic_run+0x208>)
 80002cc:	220d      	movs	r2, #13
 80002ce:	601a      	str	r2, [r3, #0]
				setTimer4(TIME_BACK_AUTO) ;
 80002d0:	f242 7010 	movw	r0, #10000	; 0x2710
 80002d4:	f000 fe1c 	bl	8000f10 <setTimer4>
			}
			break;
 80002d8:	e036      	b.n	8000348 <automatic_run+0x1fc>
		case AUTO_YELLOW:
			//tracffic 1 vang
			HAL_GPIO_WritePin(Tracffic_1A_GPIO_Port, Tracffic_1A_Pin, GPIO_PIN_SET);
 80002da:	2201      	movs	r2, #1
 80002dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002e0:	481d      	ldr	r0, [pc, #116]	; (8000358 <automatic_run+0x20c>)
 80002e2:	f001 face 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_1B_GPIO_Port, Tracffic_1B_Pin, GPIO_PIN_SET);
 80002e6:	2201      	movs	r2, #1
 80002e8:	2108      	movs	r1, #8
 80002ea:	481c      	ldr	r0, [pc, #112]	; (800035c <automatic_run+0x210>)
 80002ec:	f001 fac9 	bl	8001882 <HAL_GPIO_WritePin>
			//tracffic 2 do
			HAL_GPIO_WritePin(Tracffic_2A_GPIO_Port, Tracffic_2A_Pin, GPIO_PIN_SET);
 80002f0:	2201      	movs	r2, #1
 80002f2:	2120      	movs	r1, #32
 80002f4:	4819      	ldr	r0, [pc, #100]	; (800035c <automatic_run+0x210>)
 80002f6:	f001 fac4 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_2B_GPIO_Port, Tracffic_2B_Pin, GPIO_PIN_RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2110      	movs	r1, #16
 80002fe:	4817      	ldr	r0, [pc, #92]	; (800035c <automatic_run+0x210>)
 8000300:	f001 fabf 	bl	8001882 <HAL_GPIO_WritePin>
			if(timer1_flag == 1){
 8000304:	4b16      	ldr	r3, [pc, #88]	; (8000360 <automatic_run+0x214>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d107      	bne.n	800031c <automatic_run+0x1d0>
				status = AUTO_RED_3s;
 800030c:	4b11      	ldr	r3, [pc, #68]	; (8000354 <automatic_run+0x208>)
 800030e:	2202      	movs	r2, #2
 8000310:	601a      	str	r2, [r3, #0]
				setTimer1(time_green);
 8000312:	4b14      	ldr	r3, [pc, #80]	; (8000364 <automatic_run+0x218>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4618      	mov	r0, r3
 8000318:	f000 fde6 	bl	8000ee8 <setTimer1>
			}
			if(is_button_Pressed(0)) {
 800031c:	2000      	movs	r0, #0
 800031e:	f000 f825 	bl	800036c <is_button_Pressed>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d011      	beq.n	800034c <automatic_run+0x200>
				status = MAN_YELLOW_RED;
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <automatic_run+0x208>)
 800032a:	220c      	movs	r2, #12
 800032c:	601a      	str	r2, [r3, #0]
				setTimer4(TIME_BACK_AUTO) ;
 800032e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000332:	f000 fded 	bl	8000f10 <setTimer4>
			}
			break;
 8000336:	e009      	b.n	800034c <automatic_run+0x200>
		default:
			break;
 8000338:	bf00      	nop
 800033a:	e008      	b.n	800034e <automatic_run+0x202>
			break;
 800033c:	bf00      	nop
 800033e:	e006      	b.n	800034e <automatic_run+0x202>
			break;
 8000340:	bf00      	nop
 8000342:	e004      	b.n	800034e <automatic_run+0x202>
			break;
 8000344:	bf00      	nop
 8000346:	e002      	b.n	800034e <automatic_run+0x202>
			break;
 8000348:	bf00      	nop
 800034a:	e000      	b.n	800034e <automatic_run+0x202>
			break;
 800034c:	bf00      	nop
	}
}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000000 	.word	0x20000000
 8000358:	40010800 	.word	0x40010800
 800035c:	40010c00 	.word	0x40010c00
 8000360:	200000b4 	.word	0x200000b4
 8000364:	20000048 	.word	0x20000048
 8000368:	20000044 	.word	0x20000044

0800036c <is_button_Pressed>:

int TimeOutForKeyPress[NUM_OF_BUTTONS] =  {0,0,0,0};							// (*)

int time_count_up[NUM_OF_BUTTONS] = {TIME_HOLD, TIME_HOLD, TIME_HOLD, TIME_HOLD};		// (*)

int is_button_Pressed(int index){
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	if(nor_flag[index] == 1){
 8000374:	4a09      	ldr	r2, [pc, #36]	; (800039c <is_button_Pressed+0x30>)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800037c:	2b01      	cmp	r3, #1
 800037e:	d106      	bne.n	800038e <is_button_Pressed+0x22>
		nor_flag[index] = 0;
 8000380:	4a06      	ldr	r2, [pc, #24]	; (800039c <is_button_Pressed+0x30>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2100      	movs	r1, #0
 8000386:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800038a:	2301      	movs	r3, #1
 800038c:	e000      	b.n	8000390 <is_button_Pressed+0x24>
	}
	return 0 ;
 800038e:	2300      	movs	r3, #0
}
 8000390:	4618      	mov	r0, r3
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	20000078 	.word	0x20000078

080003a0 <is_button_long_Pressed>:
int is_button_long_Pressed(int index){
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	if(long_flag[index] == 1) return 1;
 80003a8:	4a06      	ldr	r2, [pc, #24]	; (80003c4 <is_button_long_Pressed+0x24>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d101      	bne.n	80003b8 <is_button_long_Pressed+0x18>
 80003b4:	2301      	movs	r3, #1
 80003b6:	e000      	b.n	80003ba <is_button_long_Pressed+0x1a>
	return 0 ;
 80003b8:	2300      	movs	r3, #0
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	20000088 	.word	0x20000088

080003c8 <subKeyProcess>:
			return 1;
		}
	return 0 ;
}

void subKeyProcess(int index){
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	 nor_flag[index] = 1 ;
 80003d0:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <subKeyProcess+0x1c>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2101      	movs	r1, #1
 80003d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	20000078 	.word	0x20000078

080003e8 <subKeyLongPress>:

void subKeyLongPress(int index){
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	long_flag[index] = 1 ;
 80003f0:	4a04      	ldr	r2, [pc, #16]	; (8000404 <subKeyLongPress+0x1c>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2101      	movs	r1, #1
 80003f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	20000088 	.word	0x20000088

08000408 <getKeyInput>:
void getKeyInput(){
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < NUM_OF_BUTTONS ; i++){
 800040e:	2300      	movs	r3, #0
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	e0b8      	b.n	8000586 <getKeyInput+0x17e>

		KeyReg0[i] = KeyReg1[i];
 8000414:	4a60      	ldr	r2, [pc, #384]	; (8000598 <getKeyInput+0x190>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800041c:	495f      	ldr	r1, [pc, #380]	; (800059c <getKeyInput+0x194>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  	KeyReg1[i]= KeyReg2[i];
 8000424:	4a5e      	ldr	r2, [pc, #376]	; (80005a0 <getKeyInput+0x198>)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800042c:	495a      	ldr	r1, [pc, #360]	; (8000598 <getKeyInput+0x190>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	  	if( i == 0 ) KeyReg2[i] = HAL_GPIO_ReadPin(Button1, B1_PIN);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d10a      	bne.n	8000450 <getKeyInput+0x48>
 800043a:	2102      	movs	r1, #2
 800043c:	4859      	ldr	r0, [pc, #356]	; (80005a4 <getKeyInput+0x19c>)
 800043e:	f001 fa09 	bl	8001854 <HAL_GPIO_ReadPin>
 8000442:	4603      	mov	r3, r0
 8000444:	4619      	mov	r1, r3
 8000446:	4a56      	ldr	r2, [pc, #344]	; (80005a0 <getKeyInput+0x198>)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800044e:	e028      	b.n	80004a2 <getKeyInput+0x9a>
	  	else if (i == 1) KeyReg2[i] = HAL_GPIO_ReadPin(Button2, B2_PIN);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d10a      	bne.n	800046c <getKeyInput+0x64>
 8000456:	2110      	movs	r1, #16
 8000458:	4852      	ldr	r0, [pc, #328]	; (80005a4 <getKeyInput+0x19c>)
 800045a:	f001 f9fb 	bl	8001854 <HAL_GPIO_ReadPin>
 800045e:	4603      	mov	r3, r0
 8000460:	4619      	mov	r1, r3
 8000462:	4a4f      	ldr	r2, [pc, #316]	; (80005a0 <getKeyInput+0x198>)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800046a:	e01a      	b.n	80004a2 <getKeyInput+0x9a>
	  	else if (i == 2) KeyReg2[i] = HAL_GPIO_ReadPin(Button3, B3_PIN);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2b02      	cmp	r3, #2
 8000470:	d10a      	bne.n	8000488 <getKeyInput+0x80>
 8000472:	2101      	movs	r1, #1
 8000474:	484c      	ldr	r0, [pc, #304]	; (80005a8 <getKeyInput+0x1a0>)
 8000476:	f001 f9ed 	bl	8001854 <HAL_GPIO_ReadPin>
 800047a:	4603      	mov	r3, r0
 800047c:	4619      	mov	r1, r3
 800047e:	4a48      	ldr	r2, [pc, #288]	; (80005a0 <getKeyInput+0x198>)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000486:	e00c      	b.n	80004a2 <getKeyInput+0x9a>
	  	else if (i == 3) KeyReg2[i] = HAL_GPIO_ReadPin(PedBut, PB_PIN);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2b03      	cmp	r3, #3
 800048c:	d109      	bne.n	80004a2 <getKeyInput+0x9a>
 800048e:	2101      	movs	r1, #1
 8000490:	4844      	ldr	r0, [pc, #272]	; (80005a4 <getKeyInput+0x19c>)
 8000492:	f001 f9df 	bl	8001854 <HAL_GPIO_ReadPin>
 8000496:	4603      	mov	r3, r0
 8000498:	4619      	mov	r1, r3
 800049a:	4a41      	ldr	r2, [pc, #260]	; (80005a0 <getKeyInput+0x198>)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	//else if (i == N) KeyRegN[i] = HAL_GPIO_ReadPin(your_button_port, your_button_pin);  (*)

	  	if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 80004a2:	4a3e      	ldr	r2, [pc, #248]	; (800059c <getKeyInput+0x194>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004aa:	493b      	ldr	r1, [pc, #236]	; (8000598 <getKeyInput+0x190>)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004b2:	429a      	cmp	r2, r3
 80004b4:	d15d      	bne.n	8000572 <getKeyInput+0x16a>
 80004b6:	4a38      	ldr	r2, [pc, #224]	; (8000598 <getKeyInput+0x190>)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004be:	4938      	ldr	r1, [pc, #224]	; (80005a0 <getKeyInput+0x198>)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004c6:	429a      	cmp	r2, r3
 80004c8:	d153      	bne.n	8000572 <getKeyInput+0x16a>
	  		if (KeyReg3[i] != KeyReg2[i]){
 80004ca:	4a38      	ldr	r2, [pc, #224]	; (80005ac <getKeyInput+0x1a4>)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004d2:	4933      	ldr	r1, [pc, #204]	; (80005a0 <getKeyInput+0x198>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004da:	429a      	cmp	r2, r3
 80004dc:	d016      	beq.n	800050c <getKeyInput+0x104>
	  	       KeyReg3[i] = KeyReg2[i];
 80004de:	4a30      	ldr	r2, [pc, #192]	; (80005a0 <getKeyInput+0x198>)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004e6:	4931      	ldr	r1, [pc, #196]	; (80005ac <getKeyInput+0x1a4>)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  	      if (KeyReg2[i] == PRESSED_STATE){
 80004ee:	4a2c      	ldr	r2, [pc, #176]	; (80005a0 <getKeyInput+0x198>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d141      	bne.n	800057e <getKeyInput+0x176>
	  	        TimeOutForKeyPress[i] = 0;
 80004fa:	4a2d      	ldr	r2, [pc, #180]	; (80005b0 <getKeyInput+0x1a8>)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2100      	movs	r1, #0
 8000500:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	        subKeyProcess(i);			// flag = 1
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f7ff ff5f 	bl	80003c8 <subKeyProcess>
	  		if (KeyReg3[i] != KeyReg2[i]){
 800050a:	e038      	b.n	800057e <getKeyInput+0x176>
	  	      }
	  	    }
	  	   else{
	  		   if(long_flag[i] == 1){
 800050c:	4a29      	ldr	r2, [pc, #164]	; (80005b4 <getKeyInput+0x1ac>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d114      	bne.n	8000542 <getKeyInput+0x13a>
	 	  		  TimeOutForKeyPress[i]++;
 8000518:	4a25      	ldr	r2, [pc, #148]	; (80005b0 <getKeyInput+0x1a8>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000520:	1c5a      	adds	r2, r3, #1
 8000522:	4923      	ldr	r1, [pc, #140]	; (80005b0 <getKeyInput+0x1a8>)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 	  	       if(TimeOutForKeyPress[i] > TIME_AUTO  ){
 800052a:	4a21      	ldr	r2, [pc, #132]	; (80005b0 <getKeyInput+0x1a8>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000532:	2b64      	cmp	r3, #100	; 0x64
 8000534:	dd23      	ble.n	800057e <getKeyInput+0x176>
	 	  	   // 	subKeyLongPress(i);
	 	  	          KeyReg3[i] = NORMAL_STATE;
 8000536:	4a1d      	ldr	r2, [pc, #116]	; (80005ac <getKeyInput+0x1a4>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2101      	movs	r1, #1
 800053c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  		if (KeyReg3[i] != KeyReg2[i]){
 8000540:	e01d      	b.n	800057e <getKeyInput+0x176>
	 	  	        }
	  		   }else{
		  		   	TimeOutForKeyPress[i]++;
 8000542:	4a1b      	ldr	r2, [pc, #108]	; (80005b0 <getKeyInput+0x1a8>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800054a:	1c5a      	adds	r2, r3, #1
 800054c:	4918      	ldr	r1, [pc, #96]	; (80005b0 <getKeyInput+0x1a8>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  	        if(TimeOutForKeyPress[i] > TIME_HOLD  ){
 8000554:	4a16      	ldr	r2, [pc, #88]	; (80005b0 <getKeyInput+0x1a8>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800055c:	2b64      	cmp	r3, #100	; 0x64
 800055e:	dd0e      	ble.n	800057e <getKeyInput+0x176>
		  	          subKeyLongPress(i);		// flag = 1
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f7ff ff41 	bl	80003e8 <subKeyLongPress>
		  	          KeyReg3[i] = NORMAL_STATE;
 8000566:	4a11      	ldr	r2, [pc, #68]	; (80005ac <getKeyInput+0x1a4>)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2101      	movs	r1, #1
 800056c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  		if (KeyReg3[i] != KeyReg2[i]){
 8000570:	e005      	b.n	800057e <getKeyInput+0x176>
		  	        }
	  		   }
	  	    }
	  	  }
	  	else{
	  		long_flag[i] = 0;
 8000572:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <getKeyInput+0x1ac>)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2100      	movs	r1, #0
 8000578:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800057c:	e000      	b.n	8000580 <getKeyInput+0x178>
	  		if (KeyReg3[i] != KeyReg2[i]){
 800057e:	bf00      	nop
	for (int i = 0 ; i < NUM_OF_BUTTONS ; i++){
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	3301      	adds	r3, #1
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b03      	cmp	r3, #3
 800058a:	f77f af43 	ble.w	8000414 <getKeyInput+0xc>
	  	}
	}

}
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000014 	.word	0x20000014
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000024 	.word	0x20000024
 80005a4:	40010800 	.word	0x40010800
 80005a8:	40010c00 	.word	0x40010c00
 80005ac:	20000034 	.word	0x20000034
 80005b0:	20000098 	.word	0x20000098
 80005b4:	20000088 	.word	0x20000088

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fe56 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f822 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80005c4:	f000 f862 	bl	800068c <MX_TIM2_Init>
  MX_GPIO_Init();
 80005c8:	f000 f922 	bl	8000810 <MX_GPIO_Init>
  MX_TIM3_Init();
 80005cc:	f000 f8aa 	bl	8000724 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005d0:	480a      	ldr	r0, [pc, #40]	; (80005fc <main+0x44>)
 80005d2:	f001 fda7 	bl	8002124 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005d6:	2100      	movs	r1, #0
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <main+0x48>)
 80005da:	f001 fe4d 	bl	8002278 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT ;
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <main+0x4c>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	601a      	str	r2, [r3, #0]
  setTimer1(100);
 80005e4:	2064      	movs	r0, #100	; 0x64
 80005e6:	f000 fc7f 	bl	8000ee8 <setTimer1>
  while (1)
  {
	  automatic_run();
 80005ea:	f7ff fdaf 	bl	800014c <automatic_run>
	  manual_run();
 80005ee:	f000 f98f 	bl	8000910 <manual_run>
	  tunning_mode();
 80005f2:	f000 fd47 	bl	8001084 <tunning_mode>
	  pedestrian_run();
 80005f6:	f000 fa8f 	bl	8000b18 <pedestrian_run>
	  automatic_run();
 80005fa:	e7f6      	b.n	80005ea <main+0x32>
 80005fc:	20000128 	.word	0x20000128
 8000600:	200000e0 	.word	0x200000e0
 8000604:	20000000 	.word	0x20000000

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b090      	sub	sp, #64	; 0x40
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0318 	add.w	r3, r7, #24
 8000612:	2228      	movs	r2, #40	; 0x28
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fcb6 	bl	8002f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062a:	2302      	movs	r3, #2
 800062c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062e:	2301      	movs	r3, #1
 8000630:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000632:	2310      	movs	r3, #16
 8000634:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800063a:	2300      	movs	r3, #0
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800063e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0318 	add.w	r3, r7, #24
 8000648:	4618      	mov	r0, r3
 800064a:	f001 f933 	bl	80018b4 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000654:	f000 f956 	bl	8000904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2102      	movs	r1, #2
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fb9e 	bl	8001db4 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800067e:	f000 f941 	bl	8000904 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3740      	adds	r7, #64	; 0x40
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a0:	463b      	mov	r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006a8:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <MX_TIM2_Init+0x94>)
 80006aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_TIM2_Init+0x94>)
 80006b2:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80006b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_TIM2_Init+0x94>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_TIM2_Init+0x94>)
 80006c0:	2209      	movs	r2, #9
 80006c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_TIM2_Init+0x94>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_TIM2_Init+0x94>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006d0:	4813      	ldr	r0, [pc, #76]	; (8000720 <MX_TIM2_Init+0x94>)
 80006d2:	f001 fcd7 	bl	8002084 <HAL_TIM_Base_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006dc:	f000 f912 	bl	8000904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	4619      	mov	r1, r3
 80006ec:	480c      	ldr	r0, [pc, #48]	; (8000720 <MX_TIM2_Init+0x94>)
 80006ee:	f002 f82b 	bl	8002748 <HAL_TIM_ConfigClockSource>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006f8:	f000 f904 	bl	8000904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fc:	2300      	movs	r3, #0
 80006fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_TIM2_Init+0x94>)
 800070a:	f002 fba9 	bl	8002e60 <HAL_TIMEx_MasterConfigSynchronization>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000714:	f000 f8f6 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000128 	.word	0x20000128

08000724 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08e      	sub	sp, #56	; 0x38
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
 8000750:	615a      	str	r2, [r3, #20]
 8000752:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000754:	4b2c      	ldr	r3, [pc, #176]	; (8000808 <MX_TIM3_Init+0xe4>)
 8000756:	4a2d      	ldr	r2, [pc, #180]	; (800080c <MX_TIM3_Init+0xe8>)
 8000758:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800075a:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <MX_TIM3_Init+0xe4>)
 800075c:	223f      	movs	r2, #63	; 0x3f
 800075e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000760:	4b29      	ldr	r3, [pc, #164]	; (8000808 <MX_TIM3_Init+0xe4>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000766:	4b28      	ldr	r3, [pc, #160]	; (8000808 <MX_TIM3_Init+0xe4>)
 8000768:	f240 32e7 	movw	r2, #999	; 0x3e7
 800076c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076e:	4b26      	ldr	r3, [pc, #152]	; (8000808 <MX_TIM3_Init+0xe4>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000774:	4b24      	ldr	r3, [pc, #144]	; (8000808 <MX_TIM3_Init+0xe4>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800077a:	4823      	ldr	r0, [pc, #140]	; (8000808 <MX_TIM3_Init+0xe4>)
 800077c:	f001 fc82 	bl	8002084 <HAL_TIM_Base_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000786:	f000 f8bd 	bl	8000904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000790:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000794:	4619      	mov	r1, r3
 8000796:	481c      	ldr	r0, [pc, #112]	; (8000808 <MX_TIM3_Init+0xe4>)
 8000798:	f001 ffd6 	bl	8002748 <HAL_TIM_ConfigClockSource>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80007a2:	f000 f8af 	bl	8000904 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007a6:	4818      	ldr	r0, [pc, #96]	; (8000808 <MX_TIM3_Init+0xe4>)
 80007a8:	f001 fd0e 	bl	80021c8 <HAL_TIM_PWM_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80007b2:	f000 f8a7 	bl	8000904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	4619      	mov	r1, r3
 80007c4:	4810      	ldr	r0, [pc, #64]	; (8000808 <MX_TIM3_Init+0xe4>)
 80007c6:	f002 fb4b 	bl	8002e60 <HAL_TIMEx_MasterConfigSynchronization>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80007d0:	f000 f898 	bl	8000904 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d4:	2360      	movs	r3, #96	; 0x60
 80007d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	4619      	mov	r1, r3
 80007ea:	4807      	ldr	r0, [pc, #28]	; (8000808 <MX_TIM3_Init+0xe4>)
 80007ec:	f001 feee 	bl	80025cc <HAL_TIM_PWM_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80007f6:	f000 f885 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007fa:	4803      	ldr	r0, [pc, #12]	; (8000808 <MX_TIM3_Init+0xe4>)
 80007fc:	f000 fb0a 	bl	8000e14 <HAL_TIM_MspPostInit>

}
 8000800:	bf00      	nop
 8000802:	3738      	adds	r7, #56	; 0x38
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000e0 	.word	0x200000e0
 800080c:	40000400 	.word	0x40000400

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a2d      	ldr	r2, [pc, #180]	; (80008e0 <MX_GPIO_Init+0xd0>)
 800082a:	f043 0304 	orr.w	r3, r3, #4
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0304 	and.w	r3, r3, #4
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083c:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <MX_GPIO_Init+0xd0>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a27      	ldr	r2, [pc, #156]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <MX_GPIO_Init+0xd0>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f003 0308 	and.w	r3, r3, #8
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ped_ledA_Pin|Tracffic_1B_Pin|Tracffic_2B_Pin|Tracffic_2A_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800085a:	4822      	ldr	r0, [pc, #136]	; (80008e4 <MX_GPIO_Init+0xd4>)
 800085c:	f001 f811 	bl	8001882 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Ped_ledB_Pin|Tracffic_1A_Pin, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000866:	4820      	ldr	r0, [pc, #128]	; (80008e8 <MX_GPIO_Init+0xd8>)
 8000868:	f001 f80b 	bl	8001882 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Ped_But_Pin Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Ped_But_Pin|Button_1_Pin|Button_2_Pin;
 800086c:	2313      	movs	r3, #19
 800086e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000874:	2301      	movs	r3, #1
 8000876:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	4619      	mov	r1, r3
 800087e:	481a      	ldr	r0, [pc, #104]	; (80008e8 <MX_GPIO_Init+0xd8>)
 8000880:	f000 fe64 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000884:	2301      	movs	r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800088c:	2301      	movs	r3, #1
 800088e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0308 	add.w	r3, r7, #8
 8000894:	4619      	mov	r1, r3
 8000896:	4813      	ldr	r0, [pc, #76]	; (80008e4 <MX_GPIO_Init+0xd4>)
 8000898:	f000 fe58 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pins : Ped_ledA_Pin Tracffic_1B_Pin Tracffic_2B_Pin Tracffic_2A_Pin */
  GPIO_InitStruct.Pin = Ped_ledA_Pin|Tracffic_1B_Pin|Tracffic_2B_Pin|Tracffic_2A_Pin;
 800089c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80008a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2302      	movs	r3, #2
 80008ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	4619      	mov	r1, r3
 80008b4:	480b      	ldr	r0, [pc, #44]	; (80008e4 <MX_GPIO_Init+0xd4>)
 80008b6:	f000 fe49 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pins : Ped_ledB_Pin Tracffic_1A_Pin */
  GPIO_InitStruct.Pin = Ped_ledB_Pin|Tracffic_1A_Pin;
 80008ba:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80008be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2302      	movs	r3, #2
 80008ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	4619      	mov	r1, r3
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_GPIO_Init+0xd8>)
 80008d4:	f000 fe3a 	bl	800154c <HAL_GPIO_Init>

}
 80008d8:	bf00      	nop
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40010c00 	.word	0x40010c00
 80008e8:	40010800 	.word	0x40010800

080008ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef* htim ) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
		timerRun();
 80008f4:	f000 fb48 	bl	8000f88 <timerRun>
		getKeyInput();
 80008f8:	f7ff fd86 	bl	8000408 <getKeyInput>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <manual_run>:
 *  Created on: Dec 8, 2022
 *      Author: hieun
 */
#include "manual.h"

void manual_run(){
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	switch (status) {
 8000914:	4b7c      	ldr	r3, [pc, #496]	; (8000b08 <manual_run+0x1f8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	3b0a      	subs	r3, #10
 800091a:	2b03      	cmp	r3, #3
 800091c:	f200 80e9 	bhi.w	8000af2 <manual_run+0x1e2>
 8000920:	a201      	add	r2, pc, #4	; (adr r2, 8000928 <manual_run+0x18>)
 8000922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000926:	bf00      	nop
 8000928:	08000939 	.word	0x08000939
 800092c:	080009a9 	.word	0x080009a9
 8000930:	08000a85 	.word	0x08000a85
 8000934:	08000a17 	.word	0x08000a17
		case MAN_RED_GREEN:
			//tracffic 1 do
			HAL_GPIO_WritePin(Tracffic_1A_GPIO_Port, Tracffic_1A_Pin, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	4873      	ldr	r0, [pc, #460]	; (8000b0c <manual_run+0x1fc>)
 8000940:	f000 ff9f 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_1B_GPIO_Port, Tracffic_1B_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2108      	movs	r1, #8
 8000948:	4871      	ldr	r0, [pc, #452]	; (8000b10 <manual_run+0x200>)
 800094a:	f000 ff9a 	bl	8001882 <HAL_GPIO_WritePin>
			//tracffic 2 xanh
			HAL_GPIO_WritePin(Tracffic_2A_GPIO_Port, Tracffic_2A_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2120      	movs	r1, #32
 8000952:	486f      	ldr	r0, [pc, #444]	; (8000b10 <manual_run+0x200>)
 8000954:	f000 ff95 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_2B_GPIO_Port, Tracffic_2B_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2110      	movs	r1, #16
 800095c:	486c      	ldr	r0, [pc, #432]	; (8000b10 <manual_run+0x200>)
 800095e:	f000 ff90 	bl	8001882 <HAL_GPIO_WritePin>
			if(is_button_Pressed(0)) {
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff fd02 	bl	800036c <is_button_Pressed>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d006      	beq.n	800097c <manual_run+0x6c>
				setTimer4(TIME_BACK_AUTO) ;
 800096e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000972:	f000 facd 	bl	8000f10 <setTimer4>
				status = TUNING_GREEN ;
 8000976:	4b64      	ldr	r3, [pc, #400]	; (8000b08 <manual_run+0x1f8>)
 8000978:	2214      	movs	r2, #20
 800097a:	601a      	str	r2, [r3, #0]
			}
			if(is_button_Pressed(1)) {
 800097c:	2001      	movs	r0, #1
 800097e:	f7ff fcf5 	bl	800036c <is_button_Pressed>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d006      	beq.n	8000996 <manual_run+0x86>
				setTimer4(TIME_BACK_AUTO) ;
 8000988:	f242 7010 	movw	r0, #10000	; 0x2710
 800098c:	f000 fac0 	bl	8000f10 <setTimer4>
				status = MAN_RED_YELLOW;
 8000990:	4b5d      	ldr	r3, [pc, #372]	; (8000b08 <manual_run+0x1f8>)
 8000992:	220b      	movs	r2, #11
 8000994:	601a      	str	r2, [r3, #0]
			}
			if(timer4_flag >= 1) {
 8000996:	4b5f      	ldr	r3, [pc, #380]	; (8000b14 <manual_run+0x204>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	f340 80ab 	ble.w	8000af6 <manual_run+0x1e6>
				status = AUTO_RED_3s ;
 80009a0:	4b59      	ldr	r3, [pc, #356]	; (8000b08 <manual_run+0x1f8>)
 80009a2:	2202      	movs	r2, #2
 80009a4:	601a      	str	r2, [r3, #0]
			}
			break;
 80009a6:	e0a6      	b.n	8000af6 <manual_run+0x1e6>
		case MAN_RED_YELLOW:
			//tracffic 1 do
			HAL_GPIO_WritePin(Tracffic_1A_GPIO_Port, Tracffic_1A_Pin, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ae:	4857      	ldr	r0, [pc, #348]	; (8000b0c <manual_run+0x1fc>)
 80009b0:	f000 ff67 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_1B_GPIO_Port, Tracffic_1B_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2108      	movs	r1, #8
 80009b8:	4855      	ldr	r0, [pc, #340]	; (8000b10 <manual_run+0x200>)
 80009ba:	f000 ff62 	bl	8001882 <HAL_GPIO_WritePin>
			//tracffic 2 vang
			HAL_GPIO_WritePin(Tracffic_2A_GPIO_Port, Tracffic_2A_Pin, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	2120      	movs	r1, #32
 80009c2:	4853      	ldr	r0, [pc, #332]	; (8000b10 <manual_run+0x200>)
 80009c4:	f000 ff5d 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_2B_GPIO_Port, Tracffic_2B_Pin, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2110      	movs	r1, #16
 80009cc:	4850      	ldr	r0, [pc, #320]	; (8000b10 <manual_run+0x200>)
 80009ce:	f000 ff58 	bl	8001882 <HAL_GPIO_WritePin>
			if(is_button_Pressed(0)) {
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fcca 	bl	800036c <is_button_Pressed>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d006      	beq.n	80009ec <manual_run+0xdc>
				setTimer4(TIME_BACK_AUTO) ;
 80009de:	f242 7010 	movw	r0, #10000	; 0x2710
 80009e2:	f000 fa95 	bl	8000f10 <setTimer4>
				status = TUNING_GREEN ;
 80009e6:	4b48      	ldr	r3, [pc, #288]	; (8000b08 <manual_run+0x1f8>)
 80009e8:	2214      	movs	r2, #20
 80009ea:	601a      	str	r2, [r3, #0]
			}
			if(is_button_Pressed(1)) {
 80009ec:	2001      	movs	r0, #1
 80009ee:	f7ff fcbd 	bl	800036c <is_button_Pressed>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d006      	beq.n	8000a06 <manual_run+0xf6>
				setTimer4(TIME_BACK_AUTO) ;
 80009f8:	f242 7010 	movw	r0, #10000	; 0x2710
 80009fc:	f000 fa88 	bl	8000f10 <setTimer4>
				status = MAN_GREEN_RED;
 8000a00:	4b41      	ldr	r3, [pc, #260]	; (8000b08 <manual_run+0x1f8>)
 8000a02:	220d      	movs	r2, #13
 8000a04:	601a      	str	r2, [r3, #0]
			}
			if(timer4_flag >= 1) {
 8000a06:	4b43      	ldr	r3, [pc, #268]	; (8000b14 <manual_run+0x204>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	dd75      	ble.n	8000afa <manual_run+0x1ea>
				status = AUTO_RED_2s ;
 8000a0e:	4b3e      	ldr	r3, [pc, #248]	; (8000b08 <manual_run+0x1f8>)
 8000a10:	2203      	movs	r2, #3
 8000a12:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a14:	e071      	b.n	8000afa <manual_run+0x1ea>
		case MAN_GREEN_RED:
			//tracffic 1 xanh
			HAL_GPIO_WritePin(Tracffic_1A_GPIO_Port, Tracffic_1A_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a1c:	483b      	ldr	r0, [pc, #236]	; (8000b0c <manual_run+0x1fc>)
 8000a1e:	f000 ff30 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_1B_GPIO_Port, Tracffic_1B_Pin, GPIO_PIN_SET);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2108      	movs	r1, #8
 8000a26:	483a      	ldr	r0, [pc, #232]	; (8000b10 <manual_run+0x200>)
 8000a28:	f000 ff2b 	bl	8001882 <HAL_GPIO_WritePin>
			//tracffic 2 do
			HAL_GPIO_WritePin(Tracffic_2A_GPIO_Port, Tracffic_2A_Pin, GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2120      	movs	r1, #32
 8000a30:	4837      	ldr	r0, [pc, #220]	; (8000b10 <manual_run+0x200>)
 8000a32:	f000 ff26 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_2B_GPIO_Port, Tracffic_2B_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2110      	movs	r1, #16
 8000a3a:	4835      	ldr	r0, [pc, #212]	; (8000b10 <manual_run+0x200>)
 8000a3c:	f000 ff21 	bl	8001882 <HAL_GPIO_WritePin>
			if(is_button_Pressed(0)){
 8000a40:	2000      	movs	r0, #0
 8000a42:	f7ff fc93 	bl	800036c <is_button_Pressed>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d006      	beq.n	8000a5a <manual_run+0x14a>
				setTimer4(TIME_BACK_AUTO) ;
 8000a4c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a50:	f000 fa5e 	bl	8000f10 <setTimer4>
				status = TUNING_GREEN ;
 8000a54:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <manual_run+0x1f8>)
 8000a56:	2214      	movs	r2, #20
 8000a58:	601a      	str	r2, [r3, #0]
			}
			if(is_button_Pressed(1)) {
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f7ff fc86 	bl	800036c <is_button_Pressed>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d006      	beq.n	8000a74 <manual_run+0x164>
				setTimer4(TIME_BACK_AUTO) ;
 8000a66:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a6a:	f000 fa51 	bl	8000f10 <setTimer4>
				status = MAN_YELLOW_RED;
 8000a6e:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <manual_run+0x1f8>)
 8000a70:	220c      	movs	r2, #12
 8000a72:	601a      	str	r2, [r3, #0]
			}
			if(timer4_flag >= 1) {
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <manual_run+0x204>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	dd40      	ble.n	8000afe <manual_run+0x1ee>
				status = AUTO_GREEN ;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <manual_run+0x1f8>)
 8000a7e:	2204      	movs	r2, #4
 8000a80:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a82:	e03c      	b.n	8000afe <manual_run+0x1ee>
		case MAN_YELLOW_RED:
			//tracffic 1 vang
			HAL_GPIO_WritePin(Tracffic_1A_GPIO_Port, Tracffic_1A_Pin, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a8a:	4820      	ldr	r0, [pc, #128]	; (8000b0c <manual_run+0x1fc>)
 8000a8c:	f000 fef9 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_1B_GPIO_Port, Tracffic_1B_Pin, GPIO_PIN_SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	2108      	movs	r1, #8
 8000a94:	481e      	ldr	r0, [pc, #120]	; (8000b10 <manual_run+0x200>)
 8000a96:	f000 fef4 	bl	8001882 <HAL_GPIO_WritePin>
			//tracffic 2 do
			HAL_GPIO_WritePin(Tracffic_2A_GPIO_Port, Tracffic_2A_Pin, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	481c      	ldr	r0, [pc, #112]	; (8000b10 <manual_run+0x200>)
 8000aa0:	f000 feef 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_2B_GPIO_Port, Tracffic_2B_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2110      	movs	r1, #16
 8000aa8:	4819      	ldr	r0, [pc, #100]	; (8000b10 <manual_run+0x200>)
 8000aaa:	f000 feea 	bl	8001882 <HAL_GPIO_WritePin>
			if(is_button_Pressed(0)){
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fc5c 	bl	800036c <is_button_Pressed>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d006      	beq.n	8000ac8 <manual_run+0x1b8>
				setTimer4(TIME_BACK_AUTO) ;
 8000aba:	f242 7010 	movw	r0, #10000	; 0x2710
 8000abe:	f000 fa27 	bl	8000f10 <setTimer4>
				status = TUNING_GREEN ;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <manual_run+0x1f8>)
 8000ac4:	2214      	movs	r2, #20
 8000ac6:	601a      	str	r2, [r3, #0]
			}
			if(is_button_Pressed(1)) {
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f7ff fc4f 	bl	800036c <is_button_Pressed>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d006      	beq.n	8000ae2 <manual_run+0x1d2>
				setTimer4(TIME_BACK_AUTO) ;
 8000ad4:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ad8:	f000 fa1a 	bl	8000f10 <setTimer4>
				status = MAN_RED_GREEN;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <manual_run+0x1f8>)
 8000ade:	220a      	movs	r2, #10
 8000ae0:	601a      	str	r2, [r3, #0]
			}
			if(timer4_flag >= 1) {
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <manual_run+0x204>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	dd0b      	ble.n	8000b02 <manual_run+0x1f2>
				status = AUTO_YELLOW ;
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <manual_run+0x1f8>)
 8000aec:	2205      	movs	r2, #5
 8000aee:	601a      	str	r2, [r3, #0]
			}
			break;
 8000af0:	e007      	b.n	8000b02 <manual_run+0x1f2>
		default:
			break;
 8000af2:	bf00      	nop
 8000af4:	e006      	b.n	8000b04 <manual_run+0x1f4>
			break;
 8000af6:	bf00      	nop
 8000af8:	e004      	b.n	8000b04 <manual_run+0x1f4>
			break;
 8000afa:	bf00      	nop
 8000afc:	e002      	b.n	8000b04 <manual_run+0x1f4>
			break;
 8000afe:	bf00      	nop
 8000b00:	e000      	b.n	8000b04 <manual_run+0x1f4>
			break;
 8000b02:	bf00      	nop
	}
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	40010800 	.word	0x40010800
 8000b10:	40010c00 	.word	0x40010c00
 8000b14:	200000cc 	.word	0x200000cc

08000b18 <pedestrian_run>:

int pedesStatus = PEDES_OFF;
int pedesLightCountDown = LIGHT_TIME;
int buzzerStatus = BUZZ_OFF;

void pedestrian_run(){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	switch (pedesStatus){
 8000b1c:	4b7e      	ldr	r3, [pc, #504]	; (8000d18 <pedestrian_run+0x200>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <pedestrian_run+0x12>
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d015      	beq.n	8000b54 <pedestrian_run+0x3c>
			HAL_GPIO_WritePin(Ped_ledA_GPIO_Port, Ped_ledA_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(Ped_ledB_GPIO_Port, Ped_ledB_Pin, GPIO_PIN_RESET);
		}
		break;
	default:
		break;
 8000b28:	e0f4      	b.n	8000d14 <pedestrian_run+0x1fc>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8000b2a:	4b7c      	ldr	r3, [pc, #496]	; (8000d1c <pedestrian_run+0x204>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
		if(is_button_Pressed(3)){
 8000b32:	2003      	movs	r0, #3
 8000b34:	f7ff fc1a 	bl	800036c <is_button_Pressed>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f000 80e7 	beq.w	8000d0e <pedestrian_run+0x1f6>
			pedesStatus = PEDES_ON;
 8000b40:	4b75      	ldr	r3, [pc, #468]	; (8000d18 <pedestrian_run+0x200>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	601a      	str	r2, [r3, #0]
			setTimer5(100);
 8000b46:	2064      	movs	r0, #100	; 0x64
 8000b48:	f000 f9f6 	bl	8000f38 <setTimer5>
			setTimer6(100);
 8000b4c:	2064      	movs	r0, #100	; 0x64
 8000b4e:	f000 fa07 	bl	8000f60 <setTimer6>
		break;
 8000b52:	e0dc      	b.n	8000d0e <pedestrian_run+0x1f6>
		switch(status){
 8000b54:	4b72      	ldr	r3, [pc, #456]	; (8000d20 <pedestrian_run+0x208>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	3b02      	subs	r3, #2
 8000b5a:	2b0b      	cmp	r3, #11
 8000b5c:	f200 8084 	bhi.w	8000c68 <pedestrian_run+0x150>
 8000b60:	a201      	add	r2, pc, #4	; (adr r2, 8000b68 <pedestrian_run+0x50>)
 8000b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b66:	bf00      	nop
 8000b68:	08000b99 	.word	0x08000b99
 8000b6c:	08000bb3 	.word	0x08000bb3
 8000b70:	08000bcd 	.word	0x08000bcd
 8000b74:	08000be7 	.word	0x08000be7
 8000b78:	08000c69 	.word	0x08000c69
 8000b7c:	08000c69 	.word	0x08000c69
 8000b80:	08000c69 	.word	0x08000c69
 8000b84:	08000c69 	.word	0x08000c69
 8000b88:	08000c01 	.word	0x08000c01
 8000b8c:	08000c1b 	.word	0x08000c1b
 8000b90:	08000c4f 	.word	0x08000c4f
 8000b94:	08000c35 	.word	0x08000c35
			HAL_GPIO_WritePin(Ped_ledA_GPIO_Port, Ped_ledA_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9e:	4861      	ldr	r0, [pc, #388]	; (8000d24 <pedestrian_run+0x20c>)
 8000ba0:	f000 fe6f 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ped_ledB_GPIO_Port, Ped_ledB_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000baa:	485f      	ldr	r0, [pc, #380]	; (8000d28 <pedestrian_run+0x210>)
 8000bac:	f000 fe69 	bl	8001882 <HAL_GPIO_WritePin>
			break;
 8000bb0:	e05b      	b.n	8000c6a <pedestrian_run+0x152>
			HAL_GPIO_WritePin(Ped_ledA_GPIO_Port, Ped_ledA_Pin, GPIO_PIN_SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb8:	485a      	ldr	r0, [pc, #360]	; (8000d24 <pedestrian_run+0x20c>)
 8000bba:	f000 fe62 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ped_ledB_GPIO_Port, Ped_ledB_Pin, GPIO_PIN_SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc4:	4858      	ldr	r0, [pc, #352]	; (8000d28 <pedestrian_run+0x210>)
 8000bc6:	f000 fe5c 	bl	8001882 <HAL_GPIO_WritePin>
			break;
 8000bca:	e04e      	b.n	8000c6a <pedestrian_run+0x152>
			HAL_GPIO_WritePin(Ped_ledA_GPIO_Port, Ped_ledA_Pin, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bd2:	4854      	ldr	r0, [pc, #336]	; (8000d24 <pedestrian_run+0x20c>)
 8000bd4:	f000 fe55 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ped_ledB_GPIO_Port, Ped_ledB_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bde:	4852      	ldr	r0, [pc, #328]	; (8000d28 <pedestrian_run+0x210>)
 8000be0:	f000 fe4f 	bl	8001882 <HAL_GPIO_WritePin>
			break;
 8000be4:	e041      	b.n	8000c6a <pedestrian_run+0x152>
			HAL_GPIO_WritePin(Ped_ledA_GPIO_Port, Ped_ledA_Pin, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bec:	484d      	ldr	r0, [pc, #308]	; (8000d24 <pedestrian_run+0x20c>)
 8000bee:	f000 fe48 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ped_ledB_GPIO_Port, Ped_ledB_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf8:	484b      	ldr	r0, [pc, #300]	; (8000d28 <pedestrian_run+0x210>)
 8000bfa:	f000 fe42 	bl	8001882 <HAL_GPIO_WritePin>
			break;
 8000bfe:	e034      	b.n	8000c6a <pedestrian_run+0x152>
			HAL_GPIO_WritePin(Ped_ledA_GPIO_Port, Ped_ledA_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c06:	4847      	ldr	r0, [pc, #284]	; (8000d24 <pedestrian_run+0x20c>)
 8000c08:	f000 fe3b 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ped_ledB_GPIO_Port, Ped_ledB_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c12:	4845      	ldr	r0, [pc, #276]	; (8000d28 <pedestrian_run+0x210>)
 8000c14:	f000 fe35 	bl	8001882 <HAL_GPIO_WritePin>
			break;
 8000c18:	e027      	b.n	8000c6a <pedestrian_run+0x152>
			HAL_GPIO_WritePin(Ped_ledA_GPIO_Port, Ped_ledA_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c20:	4840      	ldr	r0, [pc, #256]	; (8000d24 <pedestrian_run+0x20c>)
 8000c22:	f000 fe2e 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ped_ledB_GPIO_Port, Ped_ledB_Pin, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c2c:	483e      	ldr	r0, [pc, #248]	; (8000d28 <pedestrian_run+0x210>)
 8000c2e:	f000 fe28 	bl	8001882 <HAL_GPIO_WritePin>
			break;
 8000c32:	e01a      	b.n	8000c6a <pedestrian_run+0x152>
			HAL_GPIO_WritePin(Ped_ledA_GPIO_Port, Ped_ledA_Pin, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c3a:	483a      	ldr	r0, [pc, #232]	; (8000d24 <pedestrian_run+0x20c>)
 8000c3c:	f000 fe21 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ped_ledB_GPIO_Port, Ped_ledB_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c46:	4838      	ldr	r0, [pc, #224]	; (8000d28 <pedestrian_run+0x210>)
 8000c48:	f000 fe1b 	bl	8001882 <HAL_GPIO_WritePin>
			break;
 8000c4c:	e00d      	b.n	8000c6a <pedestrian_run+0x152>
			HAL_GPIO_WritePin(Ped_ledA_GPIO_Port, Ped_ledA_Pin, GPIO_PIN_SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c54:	4833      	ldr	r0, [pc, #204]	; (8000d24 <pedestrian_run+0x20c>)
 8000c56:	f000 fe14 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ped_ledB_GPIO_Port, Ped_ledB_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c60:	4831      	ldr	r0, [pc, #196]	; (8000d28 <pedestrian_run+0x210>)
 8000c62:	f000 fe0e 	bl	8001882 <HAL_GPIO_WritePin>
			break;
 8000c66:	e000      	b.n	8000c6a <pedestrian_run+0x152>
			break;
 8000c68:	bf00      	nop
		if(timer5_flag == 1){
 8000c6a:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <pedestrian_run+0x214>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d107      	bne.n	8000c82 <pedestrian_run+0x16a>
			setTimer5(100);
 8000c72:	2064      	movs	r0, #100	; 0x64
 8000c74:	f000 f960 	bl	8000f38 <setTimer5>
			pedesLightCountDown--;
 8000c78:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <pedestrian_run+0x218>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	4a2c      	ldr	r2, [pc, #176]	; (8000d30 <pedestrian_run+0x218>)
 8000c80:	6013      	str	r3, [r2, #0]
		if(timer6_flag == 1){
 8000c82:	4b2c      	ldr	r3, [pc, #176]	; (8000d34 <pedestrian_run+0x21c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d12a      	bne.n	8000ce0 <pedestrian_run+0x1c8>
			if(buzzerStatus == BUZZ_OFF){
 8000c8a:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <pedestrian_run+0x220>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d110      	bne.n	8000cb4 <pedestrian_run+0x19c>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8000c92:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <pedestrian_run+0x204>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2200      	movs	r2, #0
 8000c98:	635a      	str	r2, [r3, #52]	; 0x34
				buzzerStatus = BUZZ_ON;
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <pedestrian_run+0x220>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]
				setTimer6(pedesLightCountDown*10);
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <pedestrian_run+0x218>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f957 	bl	8000f60 <setTimer6>
 8000cb2:	e015      	b.n	8000ce0 <pedestrian_run+0x1c8>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100-(pedesLightCountDown/3)*10);
 8000cb4:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <pedestrian_run+0x218>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a20      	ldr	r2, [pc, #128]	; (8000d3c <pedestrian_run+0x224>)
 8000cba:	fb82 1203 	smull	r1, r2, r2, r3
 8000cbe:	17db      	asrs	r3, r3, #31
 8000cc0:	1a9a      	subs	r2, r3, r2
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4413      	add	r3, r2
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <pedestrian_run+0x204>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	635a      	str	r2, [r3, #52]	; 0x34
				buzzerStatus = BUZZ_OFF;
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <pedestrian_run+0x220>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
				setTimer6(100);
 8000cda:	2064      	movs	r0, #100	; 0x64
 8000cdc:	f000 f940 	bl	8000f60 <setTimer6>
		if(pedesLightCountDown <= 0){
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <pedestrian_run+0x218>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	dc14      	bgt.n	8000d12 <pedestrian_run+0x1fa>
			pedesLightCountDown = LIGHT_TIME;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <pedestrian_run+0x218>)
 8000cea:	221e      	movs	r2, #30
 8000cec:	601a      	str	r2, [r3, #0]
			pedesStatus = PEDES_OFF;
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <pedestrian_run+0x200>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Ped_ledA_GPIO_Port, Ped_ledA_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cfa:	480a      	ldr	r0, [pc, #40]	; (8000d24 <pedestrian_run+0x20c>)
 8000cfc:	f000 fdc1 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ped_ledB_GPIO_Port, Ped_ledB_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d06:	4808      	ldr	r0, [pc, #32]	; (8000d28 <pedestrian_run+0x210>)
 8000d08:	f000 fdbb 	bl	8001882 <HAL_GPIO_WritePin>
		break;
 8000d0c:	e001      	b.n	8000d12 <pedestrian_run+0x1fa>
		break;
 8000d0e:	bf00      	nop
 8000d10:	e000      	b.n	8000d14 <pedestrian_run+0x1fc>
		break;
 8000d12:	bf00      	nop
	}
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200000a8 	.word	0x200000a8
 8000d1c:	200000e0 	.word	0x200000e0
 8000d20:	20000000 	.word	0x20000000
 8000d24:	40010c00 	.word	0x40010c00
 8000d28:	40010800 	.word	0x40010800
 8000d2c:	200000d4 	.word	0x200000d4
 8000d30:	2000004c 	.word	0x2000004c
 8000d34:	200000dc 	.word	0x200000dc
 8000d38:	200000ac 	.word	0x200000ac
 8000d3c:	55555556 	.word	0x55555556

08000d40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_MspInit+0x5c>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <HAL_MspInit+0x5c>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6193      	str	r3, [r2, #24]
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_MspInit+0x5c>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <HAL_MspInit+0x5c>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <HAL_MspInit+0x5c>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	61d3      	str	r3, [r2, #28]
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_MspInit+0x5c>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_MspInit+0x60>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <HAL_MspInit+0x60>)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010000 	.word	0x40010000

08000da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db4:	d114      	bne.n	8000de0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_TIM_Base_MspInit+0x68>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <HAL_TIM_Base_MspInit+0x68>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	61d3      	str	r3, [r2, #28]
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_TIM_Base_MspInit+0x68>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	201c      	movs	r0, #28
 8000dd4:	f000 fb83 	bl	80014de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dd8:	201c      	movs	r0, #28
 8000dda:	f000 fb9c 	bl	8001516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000dde:	e010      	b.n	8000e02 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_TIM_Base_MspInit+0x6c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d10b      	bne.n	8000e02 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_TIM_Base_MspInit+0x68>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_TIM_Base_MspInit+0x68>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	61d3      	str	r3, [r2, #28]
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_TIM_Base_MspInit+0x68>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40000400 	.word	0x40000400

08000e14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <HAL_TIM_MspPostInit+0x58>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d117      	bne.n	8000e64 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <HAL_TIM_MspPostInit+0x5c>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <HAL_TIM_MspPostInit+0x5c>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_TIM_MspPostInit+0x5c>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e4c:	2340      	movs	r3, #64	; 0x40
 8000e4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <HAL_TIM_MspPostInit+0x60>)
 8000e60:	f000 fb74 	bl	800154c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e64:	bf00      	nop
 8000e66:	3720      	adds	r7, #32
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40000400 	.word	0x40000400
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40010800 	.word	0x40010800

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <NMI_Handler+0x4>

08000e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <BusFault_Handler+0x4>

08000e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <UsageFault_Handler+0x4>

08000e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr

08000ea2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr

08000eba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebe:	f000 fa1b 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <TIM2_IRQHandler+0x10>)
 8000ece:	f001 fa75 	bl	80023bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000128 	.word	0x20000128

08000edc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <setTimer1>:
int timer5_flag = 0;

int timer6_counter = 0;
int timer6_flag = 0;

void setTimer1(int duration){
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000ef0:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <setTimer1+0x20>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <setTimer1+0x24>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	200000b0 	.word	0x200000b0
 8000f0c:	200000b4 	.word	0x200000b4

08000f10 <setTimer4>:
void setTimer3(int duration){
	timer3_counter = duration;
	timer3_flag = 0;
}

void setTimer4(int duration){
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8000f18:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <setTimer4+0x20>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <setTimer4+0x24>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	200000c8 	.word	0x200000c8
 8000f34:	200000cc 	.word	0x200000cc

08000f38 <setTimer5>:

void setTimer5(int duration){
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 8000f40:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <setTimer5+0x20>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <setTimer5+0x24>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200000d0 	.word	0x200000d0
 8000f5c:	200000d4 	.word	0x200000d4

08000f60 <setTimer6>:

void setTimer6(int duration){
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	timer6_counter = duration;
 8000f68:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <setTimer6+0x20>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <setTimer6+0x24>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200000d8 	.word	0x200000d8
 8000f84:	200000dc 	.word	0x200000dc

08000f88 <timerRun>:

void timerRun(){
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000f8c:	4b31      	ldr	r3, [pc, #196]	; (8001054 <timerRun+0xcc>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	dd0b      	ble.n	8000fac <timerRun+0x24>
		timer1_counter--;
 8000f94:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <timerRun+0xcc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	4a2e      	ldr	r2, [pc, #184]	; (8001054 <timerRun+0xcc>)
 8000f9c:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 8000f9e:	4b2d      	ldr	r3, [pc, #180]	; (8001054 <timerRun+0xcc>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d102      	bne.n	8000fac <timerRun+0x24>
			timer1_flag = 1;
 8000fa6:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <timerRun+0xd0>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8000fac:	4b2b      	ldr	r3, [pc, #172]	; (800105c <timerRun+0xd4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	dd0b      	ble.n	8000fcc <timerRun+0x44>
		timer2_counter--;
 8000fb4:	4b29      	ldr	r3, [pc, #164]	; (800105c <timerRun+0xd4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	4a28      	ldr	r2, [pc, #160]	; (800105c <timerRun+0xd4>)
 8000fbc:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 8000fbe:	4b27      	ldr	r3, [pc, #156]	; (800105c <timerRun+0xd4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d102      	bne.n	8000fcc <timerRun+0x44>
			timer2_flag = 1;
 8000fc6:	4b26      	ldr	r3, [pc, #152]	; (8001060 <timerRun+0xd8>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8000fcc:	4b25      	ldr	r3, [pc, #148]	; (8001064 <timerRun+0xdc>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	dd0b      	ble.n	8000fec <timerRun+0x64>
		timer3_counter--;
 8000fd4:	4b23      	ldr	r3, [pc, #140]	; (8001064 <timerRun+0xdc>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	4a22      	ldr	r2, [pc, #136]	; (8001064 <timerRun+0xdc>)
 8000fdc:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <timerRun+0xdc>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d102      	bne.n	8000fec <timerRun+0x64>
			timer3_flag = 1;
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <timerRun+0xe0>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <timerRun+0xe4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	dd0b      	ble.n	800100c <timerRun+0x84>
		timer4_counter--;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <timerRun+0xe4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	; (800106c <timerRun+0xe4>)
 8000ffc:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0){
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <timerRun+0xe4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <timerRun+0x84>
			timer4_flag = 1;
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <timerRun+0xe8>)
 8001008:	2201      	movs	r2, #1
 800100a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <timerRun+0xec>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	dd0b      	ble.n	800102c <timerRun+0xa4>
		timer5_counter--;
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <timerRun+0xec>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3b01      	subs	r3, #1
 800101a:	4a16      	ldr	r2, [pc, #88]	; (8001074 <timerRun+0xec>)
 800101c:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0){
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <timerRun+0xec>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d102      	bne.n	800102c <timerRun+0xa4>
			timer5_flag = 1;
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <timerRun+0xf0>)
 8001028:	2201      	movs	r2, #1
 800102a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0){
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <timerRun+0xf4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	dd0b      	ble.n	800104c <timerRun+0xc4>
		timer6_counter--;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <timerRun+0xf4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3b01      	subs	r3, #1
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <timerRun+0xf4>)
 800103c:	6013      	str	r3, [r2, #0]
		if(timer6_counter == 0){
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <timerRun+0xf4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d102      	bne.n	800104c <timerRun+0xc4>
			timer6_flag = 1;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <timerRun+0xf8>)
 8001048:	2201      	movs	r2, #1
 800104a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	200000b0 	.word	0x200000b0
 8001058:	200000b4 	.word	0x200000b4
 800105c:	200000b8 	.word	0x200000b8
 8001060:	200000bc 	.word	0x200000bc
 8001064:	200000c0 	.word	0x200000c0
 8001068:	200000c4 	.word	0x200000c4
 800106c:	200000c8 	.word	0x200000c8
 8001070:	200000cc 	.word	0x200000cc
 8001074:	200000d0 	.word	0x200000d0
 8001078:	200000d4 	.word	0x200000d4
 800107c:	200000d8 	.word	0x200000d8
 8001080:	200000dc 	.word	0x200000dc

08001084 <tunning_mode>:
 *  Created on: Dec 16, 2022
 *      Author: hieun
 */

#include "tunning_mode.h"
void tunning_mode(){
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	switch (status) {
 8001088:	4b5f      	ldr	r3, [pc, #380]	; (8001208 <tunning_mode+0x184>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b14      	cmp	r3, #20
 800108e:	d05b      	beq.n	8001148 <tunning_mode+0xc4>
 8001090:	2b15      	cmp	r3, #21
 8001092:	f040 80b2 	bne.w	80011fa <tunning_mode+0x176>
		case TUNING_YELLOW:
			//tracffic 1 vang
			HAL_GPIO_WritePin(Tracffic_1A_GPIO_Port, Tracffic_1A_Pin, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109c:	485b      	ldr	r0, [pc, #364]	; (800120c <tunning_mode+0x188>)
 800109e:	f000 fbf0 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_1B_GPIO_Port, Tracffic_1B_Pin, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2108      	movs	r1, #8
 80010a6:	485a      	ldr	r0, [pc, #360]	; (8001210 <tunning_mode+0x18c>)
 80010a8:	f000 fbeb 	bl	8001882 <HAL_GPIO_WritePin>
			//tracffic 2 vang
			HAL_GPIO_WritePin(Tracffic_2A_GPIO_Port, Tracffic_2A_Pin, GPIO_PIN_SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	2120      	movs	r1, #32
 80010b0:	4857      	ldr	r0, [pc, #348]	; (8001210 <tunning_mode+0x18c>)
 80010b2:	f000 fbe6 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_2B_GPIO_Port, Tracffic_2B_Pin, GPIO_PIN_SET);
 80010b6:	2201      	movs	r2, #1
 80010b8:	2110      	movs	r1, #16
 80010ba:	4855      	ldr	r0, [pc, #340]	; (8001210 <tunning_mode+0x18c>)
 80010bc:	f000 fbe1 	bl	8001882 <HAL_GPIO_WritePin>
			if(!is_button_long_Pressed(2)){
 80010c0:	2002      	movs	r0, #2
 80010c2:	f7ff f96d 	bl	80003a0 <is_button_long_Pressed>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10b      	bne.n	80010e4 <tunning_mode+0x60>
				if(is_button_Pressed(2)) time_yellow += 100 ;
 80010cc:	2002      	movs	r0, #2
 80010ce:	f7ff f94d 	bl	800036c <is_button_Pressed>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d01d      	beq.n	8001114 <tunning_mode+0x90>
 80010d8:	4b4e      	ldr	r3, [pc, #312]	; (8001214 <tunning_mode+0x190>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	3364      	adds	r3, #100	; 0x64
 80010de:	4a4d      	ldr	r2, [pc, #308]	; (8001214 <tunning_mode+0x190>)
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e017      	b.n	8001114 <tunning_mode+0x90>
			}else if(is_button_long_Pressed(2)){
 80010e4:	2002      	movs	r0, #2
 80010e6:	f7ff f95b 	bl	80003a0 <is_button_long_Pressed>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d011      	beq.n	8001114 <tunning_mode+0x90>
				if(is_button_Pressed(2)) time_yellow -= 100 ;
 80010f0:	2002      	movs	r0, #2
 80010f2:	f7ff f93b 	bl	800036c <is_button_Pressed>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d004      	beq.n	8001106 <tunning_mode+0x82>
 80010fc:	4b45      	ldr	r3, [pc, #276]	; (8001214 <tunning_mode+0x190>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3b64      	subs	r3, #100	; 0x64
 8001102:	4a44      	ldr	r2, [pc, #272]	; (8001214 <tunning_mode+0x190>)
 8001104:	6013      	str	r3, [r2, #0]
				if(time_yellow <= 100) time_yellow = 100 ;
 8001106:	4b43      	ldr	r3, [pc, #268]	; (8001214 <tunning_mode+0x190>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b64      	cmp	r3, #100	; 0x64
 800110c:	dc02      	bgt.n	8001114 <tunning_mode+0x90>
 800110e:	4b41      	ldr	r3, [pc, #260]	; (8001214 <tunning_mode+0x190>)
 8001110:	2264      	movs	r2, #100	; 0x64
 8001112:	601a      	str	r2, [r3, #0]
			}
			if(is_button_Pressed(1)) status = TUNING_GREEN ;
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff f929 	bl	800036c <is_button_Pressed>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <tunning_mode+0xa2>
 8001120:	4b39      	ldr	r3, [pc, #228]	; (8001208 <tunning_mode+0x184>)
 8001122:	2214      	movs	r2, #20
 8001124:	601a      	str	r2, [r3, #0]
			if(is_button_Pressed(0)) {
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff f920 	bl	800036c <is_button_Pressed>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <tunning_mode+0xb4>
				status = AUTO_RED_3s ;
 8001132:	4b35      	ldr	r3, [pc, #212]	; (8001208 <tunning_mode+0x184>)
 8001134:	2202      	movs	r2, #2
 8001136:	601a      	str	r2, [r3, #0]
			}

			if(timer4_flag >= 1) {
 8001138:	4b37      	ldr	r3, [pc, #220]	; (8001218 <tunning_mode+0x194>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	dd5e      	ble.n	80011fe <tunning_mode+0x17a>
				status = AUTO_RED_3s ;
 8001140:	4b31      	ldr	r3, [pc, #196]	; (8001208 <tunning_mode+0x184>)
 8001142:	2202      	movs	r2, #2
 8001144:	601a      	str	r2, [r3, #0]
			}
			break;
 8001146:	e05a      	b.n	80011fe <tunning_mode+0x17a>
		case TUNING_GREEN:
			//tracffic 1 xanh
			HAL_GPIO_WritePin(Tracffic_1A_GPIO_Port, Tracffic_1A_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800114e:	482f      	ldr	r0, [pc, #188]	; (800120c <tunning_mode+0x188>)
 8001150:	f000 fb97 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_1B_GPIO_Port, Tracffic_1B_Pin, GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	2108      	movs	r1, #8
 8001158:	482d      	ldr	r0, [pc, #180]	; (8001210 <tunning_mode+0x18c>)
 800115a:	f000 fb92 	bl	8001882 <HAL_GPIO_WritePin>
			//tracffic 2 xanh
			HAL_GPIO_WritePin(Tracffic_2A_GPIO_Port, Tracffic_2A_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2120      	movs	r1, #32
 8001162:	482b      	ldr	r0, [pc, #172]	; (8001210 <tunning_mode+0x18c>)
 8001164:	f000 fb8d 	bl	8001882 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Tracffic_2B_GPIO_Port, Tracffic_2B_Pin, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	2110      	movs	r1, #16
 800116c:	4828      	ldr	r0, [pc, #160]	; (8001210 <tunning_mode+0x18c>)
 800116e:	f000 fb88 	bl	8001882 <HAL_GPIO_WritePin>
			if(!is_button_long_Pressed(2)){
 8001172:	2002      	movs	r0, #2
 8001174:	f7ff f914 	bl	80003a0 <is_button_long_Pressed>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10b      	bne.n	8001196 <tunning_mode+0x112>
				if(is_button_Pressed(2)) time_green += 100 ;
 800117e:	2002      	movs	r0, #2
 8001180:	f7ff f8f4 	bl	800036c <is_button_Pressed>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d01d      	beq.n	80011c6 <tunning_mode+0x142>
 800118a:	4b24      	ldr	r3, [pc, #144]	; (800121c <tunning_mode+0x198>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3364      	adds	r3, #100	; 0x64
 8001190:	4a22      	ldr	r2, [pc, #136]	; (800121c <tunning_mode+0x198>)
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	e017      	b.n	80011c6 <tunning_mode+0x142>
			}else if(is_button_long_Pressed(2)){
 8001196:	2002      	movs	r0, #2
 8001198:	f7ff f902 	bl	80003a0 <is_button_long_Pressed>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d011      	beq.n	80011c6 <tunning_mode+0x142>
				if(is_button_Pressed(2)) time_green -= 100 ;
 80011a2:	2002      	movs	r0, #2
 80011a4:	f7ff f8e2 	bl	800036c <is_button_Pressed>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d004      	beq.n	80011b8 <tunning_mode+0x134>
 80011ae:	4b1b      	ldr	r3, [pc, #108]	; (800121c <tunning_mode+0x198>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	3b64      	subs	r3, #100	; 0x64
 80011b4:	4a19      	ldr	r2, [pc, #100]	; (800121c <tunning_mode+0x198>)
 80011b6:	6013      	str	r3, [r2, #0]
				if(time_green <= 100) time_green = 100 ;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <tunning_mode+0x198>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b64      	cmp	r3, #100	; 0x64
 80011be:	dc02      	bgt.n	80011c6 <tunning_mode+0x142>
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <tunning_mode+0x198>)
 80011c2:	2264      	movs	r2, #100	; 0x64
 80011c4:	601a      	str	r2, [r3, #0]
			}
			if(is_button_Pressed(1)) status = TUNING_YELLOW;
 80011c6:	2001      	movs	r0, #1
 80011c8:	f7ff f8d0 	bl	800036c <is_button_Pressed>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <tunning_mode+0x154>
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <tunning_mode+0x184>)
 80011d4:	2215      	movs	r2, #21
 80011d6:	601a      	str	r2, [r3, #0]
			if(is_button_Pressed(0)) {
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff f8c7 	bl	800036c <is_button_Pressed>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <tunning_mode+0x166>
				status = AUTO_RED_3s ;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <tunning_mode+0x184>)
 80011e6:	2202      	movs	r2, #2
 80011e8:	601a      	str	r2, [r3, #0]
			}
			if(timer4_flag >= 1) {
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <tunning_mode+0x194>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	dd07      	ble.n	8001202 <tunning_mode+0x17e>
				status = AUTO_RED_3s ;
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <tunning_mode+0x184>)
 80011f4:	2202      	movs	r2, #2
 80011f6:	601a      	str	r2, [r3, #0]
			}
			break;
 80011f8:	e003      	b.n	8001202 <tunning_mode+0x17e>
		default:
			break;
 80011fa:	bf00      	nop
 80011fc:	e002      	b.n	8001204 <tunning_mode+0x180>
			break;
 80011fe:	bf00      	nop
 8001200:	e000      	b.n	8001204 <tunning_mode+0x180>
			break;
 8001202:	bf00      	nop
	}
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000000 	.word	0x20000000
 800120c:	40010800 	.word	0x40010800
 8001210:	40010c00 	.word	0x40010c00
 8001214:	20000044 	.word	0x20000044
 8001218:	200000cc 	.word	0x200000cc
 800121c:	20000048 	.word	0x20000048

08001220 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001220:	480c      	ldr	r0, [pc, #48]	; (8001254 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001222:	490d      	ldr	r1, [pc, #52]	; (8001258 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001228:	e002      	b.n	8001230 <LoopCopyDataInit>

0800122a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800122c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122e:	3304      	adds	r3, #4

08001230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001234:	d3f9      	bcc.n	800122a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001238:	4c0a      	ldr	r4, [pc, #40]	; (8001264 <LoopFillZerobss+0x22>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800123c:	e001      	b.n	8001242 <LoopFillZerobss>

0800123e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001240:	3204      	adds	r2, #4

08001242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001244:	d3fb      	bcc.n	800123e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001246:	f7ff fe49 	bl	8000edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800124a:	f001 fe79 	bl	8002f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800124e:	f7ff f9b3 	bl	80005b8 <main>
  bx lr
 8001252:	4770      	bx	lr
  ldr r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001258:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800125c:	08002fd8 	.word	0x08002fd8
  ldr r2, =_sbss
 8001260:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001264:	20000174 	.word	0x20000174

08001268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC1_2_IRQHandler>
	...

0800126c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_Init+0x28>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_Init+0x28>)
 8001276:	f043 0310 	orr.w	r3, r3, #16
 800127a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f000 f923 	bl	80014c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001282:	200f      	movs	r0, #15
 8001284:	f000 f808 	bl	8001298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001288:	f7ff fd5a 	bl	8000d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40022000 	.word	0x40022000

08001298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_InitTick+0x54>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_InitTick+0x58>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f93b 	bl	8001532 <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00e      	b.n	80012e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d80a      	bhi.n	80012e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012cc:	2200      	movs	r2, #0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f000 f903 	bl	80014de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <HAL_InitTick+0x5c>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e000      	b.n	80012e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000050 	.word	0x20000050
 80012f0:	20000058 	.word	0x20000058
 80012f4:	20000054 	.word	0x20000054

080012f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_IncTick+0x1c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_IncTick+0x20>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a03      	ldr	r2, [pc, #12]	; (8001318 <HAL_IncTick+0x20>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	20000058 	.word	0x20000058
 8001318:	20000170 	.word	0x20000170

0800131c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b02      	ldr	r3, [pc, #8]	; (800132c <HAL_GetTick+0x10>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	20000170 	.word	0x20000170

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db0b      	blt.n	80013be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	4906      	ldr	r1, [pc, #24]	; (80013c8 <__NVIC_EnableIRQ+0x34>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2001      	movs	r0, #1
 80013b6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	; (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001494:	d301      	bcc.n	800149a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001496:	2301      	movs	r3, #1
 8001498:	e00f      	b.n	80014ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <SysTick_Config+0x40>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a2:	210f      	movs	r1, #15
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f7ff ff90 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <SysTick_Config+0x40>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <SysTick_Config+0x40>)
 80014b4:	2207      	movs	r2, #7
 80014b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff2d 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f0:	f7ff ff42 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ff90 	bl	8001420 <NVIC_EncodePriority>
 8001500:	4602      	mov	r2, r0
 8001502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff5f 	bl	80013cc <__NVIC_SetPriority>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff35 	bl	8001394 <__NVIC_EnableIRQ>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffa2 	bl	8001484 <SysTick_Config>
 8001540:	4603      	mov	r3, r0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800154c:	b480      	push	{r7}
 800154e:	b08b      	sub	sp, #44	; 0x2c
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155e:	e169      	b.n	8001834 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001560:	2201      	movs	r2, #1
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	429a      	cmp	r2, r3
 800157a:	f040 8158 	bne.w	800182e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4a9a      	ldr	r2, [pc, #616]	; (80017ec <HAL_GPIO_Init+0x2a0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d05e      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 8001588:	4a98      	ldr	r2, [pc, #608]	; (80017ec <HAL_GPIO_Init+0x2a0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d875      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 800158e:	4a98      	ldr	r2, [pc, #608]	; (80017f0 <HAL_GPIO_Init+0x2a4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d058      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 8001594:	4a96      	ldr	r2, [pc, #600]	; (80017f0 <HAL_GPIO_Init+0x2a4>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d86f      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 800159a:	4a96      	ldr	r2, [pc, #600]	; (80017f4 <HAL_GPIO_Init+0x2a8>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d052      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 80015a0:	4a94      	ldr	r2, [pc, #592]	; (80017f4 <HAL_GPIO_Init+0x2a8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d869      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 80015a6:	4a94      	ldr	r2, [pc, #592]	; (80017f8 <HAL_GPIO_Init+0x2ac>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d04c      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 80015ac:	4a92      	ldr	r2, [pc, #584]	; (80017f8 <HAL_GPIO_Init+0x2ac>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d863      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 80015b2:	4a92      	ldr	r2, [pc, #584]	; (80017fc <HAL_GPIO_Init+0x2b0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d046      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 80015b8:	4a90      	ldr	r2, [pc, #576]	; (80017fc <HAL_GPIO_Init+0x2b0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d85d      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 80015be:	2b12      	cmp	r3, #18
 80015c0:	d82a      	bhi.n	8001618 <HAL_GPIO_Init+0xcc>
 80015c2:	2b12      	cmp	r3, #18
 80015c4:	d859      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 80015c6:	a201      	add	r2, pc, #4	; (adr r2, 80015cc <HAL_GPIO_Init+0x80>)
 80015c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015cc:	08001647 	.word	0x08001647
 80015d0:	08001621 	.word	0x08001621
 80015d4:	08001633 	.word	0x08001633
 80015d8:	08001675 	.word	0x08001675
 80015dc:	0800167b 	.word	0x0800167b
 80015e0:	0800167b 	.word	0x0800167b
 80015e4:	0800167b 	.word	0x0800167b
 80015e8:	0800167b 	.word	0x0800167b
 80015ec:	0800167b 	.word	0x0800167b
 80015f0:	0800167b 	.word	0x0800167b
 80015f4:	0800167b 	.word	0x0800167b
 80015f8:	0800167b 	.word	0x0800167b
 80015fc:	0800167b 	.word	0x0800167b
 8001600:	0800167b 	.word	0x0800167b
 8001604:	0800167b 	.word	0x0800167b
 8001608:	0800167b 	.word	0x0800167b
 800160c:	0800167b 	.word	0x0800167b
 8001610:	08001629 	.word	0x08001629
 8001614:	0800163d 	.word	0x0800163d
 8001618:	4a79      	ldr	r2, [pc, #484]	; (8001800 <HAL_GPIO_Init+0x2b4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d013      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800161e:	e02c      	b.n	800167a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	623b      	str	r3, [r7, #32]
          break;
 8001626:	e029      	b.n	800167c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	3304      	adds	r3, #4
 800162e:	623b      	str	r3, [r7, #32]
          break;
 8001630:	e024      	b.n	800167c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	3308      	adds	r3, #8
 8001638:	623b      	str	r3, [r7, #32]
          break;
 800163a:	e01f      	b.n	800167c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	330c      	adds	r3, #12
 8001642:	623b      	str	r3, [r7, #32]
          break;
 8001644:	e01a      	b.n	800167c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800164e:	2304      	movs	r3, #4
 8001650:	623b      	str	r3, [r7, #32]
          break;
 8001652:	e013      	b.n	800167c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d105      	bne.n	8001668 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800165c:	2308      	movs	r3, #8
 800165e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	611a      	str	r2, [r3, #16]
          break;
 8001666:	e009      	b.n	800167c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001668:	2308      	movs	r3, #8
 800166a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	615a      	str	r2, [r3, #20]
          break;
 8001672:	e003      	b.n	800167c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
          break;
 8001678:	e000      	b.n	800167c <HAL_GPIO_Init+0x130>
          break;
 800167a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	2bff      	cmp	r3, #255	; 0xff
 8001680:	d801      	bhi.n	8001686 <HAL_GPIO_Init+0x13a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	e001      	b.n	800168a <HAL_GPIO_Init+0x13e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3304      	adds	r3, #4
 800168a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2bff      	cmp	r3, #255	; 0xff
 8001690:	d802      	bhi.n	8001698 <HAL_GPIO_Init+0x14c>
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	e002      	b.n	800169e <HAL_GPIO_Init+0x152>
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	3b08      	subs	r3, #8
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	210f      	movs	r1, #15
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	401a      	ands	r2, r3
 80016b0:	6a39      	ldr	r1, [r7, #32]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	431a      	orrs	r2, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 80b1 	beq.w	800182e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016cc:	4b4d      	ldr	r3, [pc, #308]	; (8001804 <HAL_GPIO_Init+0x2b8>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a4c      	ldr	r2, [pc, #304]	; (8001804 <HAL_GPIO_Init+0x2b8>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <HAL_GPIO_Init+0x2b8>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016e4:	4a48      	ldr	r2, [pc, #288]	; (8001808 <HAL_GPIO_Init+0x2bc>)
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	3302      	adds	r3, #2
 80016ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	220f      	movs	r2, #15
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a40      	ldr	r2, [pc, #256]	; (800180c <HAL_GPIO_Init+0x2c0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d013      	beq.n	8001738 <HAL_GPIO_Init+0x1ec>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a3f      	ldr	r2, [pc, #252]	; (8001810 <HAL_GPIO_Init+0x2c4>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d00d      	beq.n	8001734 <HAL_GPIO_Init+0x1e8>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a3e      	ldr	r2, [pc, #248]	; (8001814 <HAL_GPIO_Init+0x2c8>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d007      	beq.n	8001730 <HAL_GPIO_Init+0x1e4>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a3d      	ldr	r2, [pc, #244]	; (8001818 <HAL_GPIO_Init+0x2cc>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d101      	bne.n	800172c <HAL_GPIO_Init+0x1e0>
 8001728:	2303      	movs	r3, #3
 800172a:	e006      	b.n	800173a <HAL_GPIO_Init+0x1ee>
 800172c:	2304      	movs	r3, #4
 800172e:	e004      	b.n	800173a <HAL_GPIO_Init+0x1ee>
 8001730:	2302      	movs	r3, #2
 8001732:	e002      	b.n	800173a <HAL_GPIO_Init+0x1ee>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_GPIO_Init+0x1ee>
 8001738:	2300      	movs	r3, #0
 800173a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173c:	f002 0203 	and.w	r2, r2, #3
 8001740:	0092      	lsls	r2, r2, #2
 8001742:	4093      	lsls	r3, r2
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800174a:	492f      	ldr	r1, [pc, #188]	; (8001808 <HAL_GPIO_Init+0x2bc>)
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001764:	4b2d      	ldr	r3, [pc, #180]	; (800181c <HAL_GPIO_Init+0x2d0>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	492c      	ldr	r1, [pc, #176]	; (800181c <HAL_GPIO_Init+0x2d0>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	600b      	str	r3, [r1, #0]
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001772:	4b2a      	ldr	r3, [pc, #168]	; (800181c <HAL_GPIO_Init+0x2d0>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	43db      	mvns	r3, r3
 800177a:	4928      	ldr	r1, [pc, #160]	; (800181c <HAL_GPIO_Init+0x2d0>)
 800177c:	4013      	ands	r3, r2
 800177e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800178c:	4b23      	ldr	r3, [pc, #140]	; (800181c <HAL_GPIO_Init+0x2d0>)
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	4922      	ldr	r1, [pc, #136]	; (800181c <HAL_GPIO_Init+0x2d0>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	604b      	str	r3, [r1, #4]
 8001798:	e006      	b.n	80017a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800179a:	4b20      	ldr	r3, [pc, #128]	; (800181c <HAL_GPIO_Init+0x2d0>)
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	491e      	ldr	r1, [pc, #120]	; (800181c <HAL_GPIO_Init+0x2d0>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d006      	beq.n	80017c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_GPIO_Init+0x2d0>)
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	4918      	ldr	r1, [pc, #96]	; (800181c <HAL_GPIO_Init+0x2d0>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	608b      	str	r3, [r1, #8]
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <HAL_GPIO_Init+0x2d0>)
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	4914      	ldr	r1, [pc, #80]	; (800181c <HAL_GPIO_Init+0x2d0>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d021      	beq.n	8001820 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_GPIO_Init+0x2d0>)
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	490e      	ldr	r1, [pc, #56]	; (800181c <HAL_GPIO_Init+0x2d0>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	60cb      	str	r3, [r1, #12]
 80017e8:	e021      	b.n	800182e <HAL_GPIO_Init+0x2e2>
 80017ea:	bf00      	nop
 80017ec:	10320000 	.word	0x10320000
 80017f0:	10310000 	.word	0x10310000
 80017f4:	10220000 	.word	0x10220000
 80017f8:	10210000 	.word	0x10210000
 80017fc:	10120000 	.word	0x10120000
 8001800:	10110000 	.word	0x10110000
 8001804:	40021000 	.word	0x40021000
 8001808:	40010000 	.word	0x40010000
 800180c:	40010800 	.word	0x40010800
 8001810:	40010c00 	.word	0x40010c00
 8001814:	40011000 	.word	0x40011000
 8001818:	40011400 	.word	0x40011400
 800181c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_GPIO_Init+0x304>)
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	43db      	mvns	r3, r3
 8001828:	4909      	ldr	r1, [pc, #36]	; (8001850 <HAL_GPIO_Init+0x304>)
 800182a:	4013      	ands	r3, r2
 800182c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	3301      	adds	r3, #1
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	fa22 f303 	lsr.w	r3, r2, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	f47f ae8e 	bne.w	8001560 <HAL_GPIO_Init+0x14>
  }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	372c      	adds	r7, #44	; 0x2c
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	40010400 	.word	0x40010400

08001854 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	e001      	b.n	8001876 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	460b      	mov	r3, r1
 800188c:	807b      	strh	r3, [r7, #2]
 800188e:	4613      	mov	r3, r2
 8001890:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001892:	787b      	ldrb	r3, [r7, #1]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001898:	887a      	ldrh	r2, [r7, #2]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800189e:	e003      	b.n	80018a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018a0:	887b      	ldrh	r3, [r7, #2]
 80018a2:	041a      	lsls	r2, r3, #16
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	611a      	str	r2, [r3, #16]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
	...

080018b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e26c      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8087 	beq.w	80019e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018d4:	4b92      	ldr	r3, [pc, #584]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d00c      	beq.n	80018fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018e0:	4b8f      	ldr	r3, [pc, #572]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 030c 	and.w	r3, r3, #12
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d112      	bne.n	8001912 <HAL_RCC_OscConfig+0x5e>
 80018ec:	4b8c      	ldr	r3, [pc, #560]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f8:	d10b      	bne.n	8001912 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fa:	4b89      	ldr	r3, [pc, #548]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d06c      	beq.n	80019e0 <HAL_RCC_OscConfig+0x12c>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d168      	bne.n	80019e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e246      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x76>
 800191c:	4b80      	ldr	r3, [pc, #512]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a7f      	ldr	r2, [pc, #508]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	e02e      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0x98>
 8001932:	4b7b      	ldr	r3, [pc, #492]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a7a      	ldr	r2, [pc, #488]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b78      	ldr	r3, [pc, #480]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a77      	ldr	r2, [pc, #476]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e01d      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0xbc>
 8001956:	4b72      	ldr	r3, [pc, #456]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a71      	ldr	r2, [pc, #452]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800195c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b6f      	ldr	r3, [pc, #444]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a6e      	ldr	r2, [pc, #440]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e00b      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 8001970:	4b6b      	ldr	r3, [pc, #428]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a6a      	ldr	r2, [pc, #424]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b68      	ldr	r3, [pc, #416]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a67      	ldr	r2, [pc, #412]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001986:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fcc4 	bl	800131c <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff fcc0 	bl	800131c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e1fa      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b5d      	ldr	r3, [pc, #372]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0xe4>
 80019b6:	e014      	b.n	80019e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fcb0 	bl	800131c <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff fcac 	bl	800131c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e1e6      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d2:	4b53      	ldr	r3, [pc, #332]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x10c>
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d063      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ee:	4b4c      	ldr	r3, [pc, #304]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019fa:	4b49      	ldr	r3, [pc, #292]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d11c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x18c>
 8001a06:	4b46      	ldr	r3, [pc, #280]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d116      	bne.n	8001a40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_RCC_OscConfig+0x176>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e1ba      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4939      	ldr	r1, [pc, #228]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	e03a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d020      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a48:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fc65 	bl	800131c <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff fc61 	bl	800131c <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e19b      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4927      	ldr	r1, [pc, #156]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8a:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff fc44 	bl	800131c <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a98:	f7ff fc40 	bl	800131c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e17a      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d03a      	beq.n	8001b38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d019      	beq.n	8001afe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fc24 	bl	800131c <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fc20 	bl	800131c <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e15a      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f000 faa6 	bl	8002048 <RCC_Delay>
 8001afc:	e01c      	b.n	8001b38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b04:	f7ff fc0a 	bl	800131c <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0a:	e00f      	b.n	8001b2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b0c:	f7ff fc06 	bl	800131c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d908      	bls.n	8001b2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e140      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	42420000 	.word	0x42420000
 8001b28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2c:	4b9e      	ldr	r3, [pc, #632]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e9      	bne.n	8001b0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80a6 	beq.w	8001c92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4a:	4b97      	ldr	r3, [pc, #604]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10d      	bne.n	8001b72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	4b94      	ldr	r3, [pc, #592]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	4a93      	ldr	r2, [pc, #588]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b60:	61d3      	str	r3, [r2, #28]
 8001b62:	4b91      	ldr	r3, [pc, #580]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b72:	4b8e      	ldr	r3, [pc, #568]	; (8001dac <HAL_RCC_OscConfig+0x4f8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d118      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7e:	4b8b      	ldr	r3, [pc, #556]	; (8001dac <HAL_RCC_OscConfig+0x4f8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a8a      	ldr	r2, [pc, #552]	; (8001dac <HAL_RCC_OscConfig+0x4f8>)
 8001b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fbc7 	bl	800131c <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b92:	f7ff fbc3 	bl	800131c <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b64      	cmp	r3, #100	; 0x64
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0fd      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba4:	4b81      	ldr	r3, [pc, #516]	; (8001dac <HAL_RCC_OscConfig+0x4f8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d106      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x312>
 8001bb8:	4b7b      	ldr	r3, [pc, #492]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a7a      	ldr	r2, [pc, #488]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	e02d      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x334>
 8001bce:	4b76      	ldr	r3, [pc, #472]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a75      	ldr	r2, [pc, #468]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	6213      	str	r3, [r2, #32]
 8001bda:	4b73      	ldr	r3, [pc, #460]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a72      	ldr	r2, [pc, #456]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	f023 0304 	bic.w	r3, r3, #4
 8001be4:	6213      	str	r3, [r2, #32]
 8001be6:	e01c      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d10c      	bne.n	8001c0a <HAL_RCC_OscConfig+0x356>
 8001bf0:	4b6d      	ldr	r3, [pc, #436]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4a6c      	ldr	r2, [pc, #432]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	6213      	str	r3, [r2, #32]
 8001bfc:	4b6a      	ldr	r3, [pc, #424]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	4a69      	ldr	r2, [pc, #420]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6213      	str	r3, [r2, #32]
 8001c08:	e00b      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001c0a:	4b67      	ldr	r3, [pc, #412]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	4a66      	ldr	r2, [pc, #408]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	6213      	str	r3, [r2, #32]
 8001c16:	4b64      	ldr	r3, [pc, #400]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	4a63      	ldr	r2, [pc, #396]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	f023 0304 	bic.w	r3, r3, #4
 8001c20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d015      	beq.n	8001c56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2a:	f7ff fb77 	bl	800131c <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c32:	f7ff fb73 	bl	800131c <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e0ab      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c48:	4b57      	ldr	r3, [pc, #348]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0ee      	beq.n	8001c32 <HAL_RCC_OscConfig+0x37e>
 8001c54:	e014      	b.n	8001c80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c56:	f7ff fb61 	bl	800131c <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff fb5d 	bl	800131c <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e095      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c74:	4b4c      	ldr	r3, [pc, #304]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1ee      	bne.n	8001c5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d105      	bne.n	8001c92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c86:	4b48      	ldr	r3, [pc, #288]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4a47      	ldr	r2, [pc, #284]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8081 	beq.w	8001d9e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9c:	4b42      	ldr	r3, [pc, #264]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d061      	beq.n	8001d6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d146      	bne.n	8001d3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb0:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <HAL_RCC_OscConfig+0x4fc>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fb31 	bl	800131c <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbe:	f7ff fb2d 	bl	800131c <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e067      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd0:	4b35      	ldr	r3, [pc, #212]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f0      	bne.n	8001cbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce4:	d108      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ce6:	4b30      	ldr	r3, [pc, #192]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	492d      	ldr	r1, [pc, #180]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a19      	ldr	r1, [r3, #32]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	4927      	ldr	r1, [pc, #156]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d10:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <HAL_RCC_OscConfig+0x4fc>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff fb01 	bl	800131c <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7ff fafd 	bl	800131c <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e037      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d30:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x46a>
 8001d3c:	e02f      	b.n	8001d9e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <HAL_RCC_OscConfig+0x4fc>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff faea 	bl	800131c <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7ff fae6 	bl	800131c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e020      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x498>
 8001d6a:	e018      	b.n	8001d9e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e013      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d106      	bne.n	8001d9a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d001      	beq.n	8001d9e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40007000 	.word	0x40007000
 8001db0:	42420060 	.word	0x42420060

08001db4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0d0      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b6a      	ldr	r3, [pc, #424]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d910      	bls.n	8001df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 0207 	bic.w	r2, r3, #7
 8001dde:	4965      	ldr	r1, [pc, #404]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b63      	ldr	r3, [pc, #396]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0b8      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d020      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e10:	4b59      	ldr	r3, [pc, #356]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4a58      	ldr	r2, [pc, #352]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e28:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4a52      	ldr	r2, [pc, #328]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e34:	4b50      	ldr	r3, [pc, #320]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	494d      	ldr	r1, [pc, #308]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d040      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d107      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d115      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e07f      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e72:	4b41      	ldr	r3, [pc, #260]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d109      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e073      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e82:	4b3d      	ldr	r3, [pc, #244]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e06b      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e92:	4b39      	ldr	r3, [pc, #228]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f023 0203 	bic.w	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4936      	ldr	r1, [pc, #216]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea4:	f7ff fa3a 	bl	800131c <HAL_GetTick>
 8001ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eaa:	e00a      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eac:	f7ff fa36 	bl	800131c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e053      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec2:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 020c 	and.w	r2, r3, #12
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d1eb      	bne.n	8001eac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d210      	bcs.n	8001f04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 0207 	bic.w	r2, r3, #7
 8001eea:	4922      	ldr	r1, [pc, #136]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e032      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4916      	ldr	r1, [pc, #88]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	490e      	ldr	r1, [pc, #56]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f42:	f000 f821 	bl	8001f88 <HAL_RCC_GetSysClockFreq>
 8001f46:	4602      	mov	r2, r0
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	490a      	ldr	r1, [pc, #40]	; (8001f7c <HAL_RCC_ClockConfig+0x1c8>)
 8001f54:	5ccb      	ldrb	r3, [r1, r3]
 8001f56:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5a:	4a09      	ldr	r2, [pc, #36]	; (8001f80 <HAL_RCC_ClockConfig+0x1cc>)
 8001f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_RCC_ClockConfig+0x1d0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff f998 	bl	8001298 <HAL_InitTick>

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40022000 	.word	0x40022000
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	08002fc0 	.word	0x08002fc0
 8001f80:	20000050 	.word	0x20000050
 8001f84:	20000054 	.word	0x20000054

08001f88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f88:	b490      	push	{r4, r7}
 8001f8a:	b08a      	sub	sp, #40	; 0x28
 8001f8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f8e:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f90:	1d3c      	adds	r4, r7, #4
 8001f92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f98:	f240 2301 	movw	r3, #513	; 0x201
 8001f9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fb2:	4b22      	ldr	r3, [pc, #136]	; (800203c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d002      	beq.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d003      	beq.n	8001fce <HAL_RCC_GetSysClockFreq+0x46>
 8001fc6:	e02d      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fca:	623b      	str	r3, [r7, #32]
      break;
 8001fcc:	e02d      	b.n	800202a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	0c9b      	lsrs	r3, r3, #18
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fda:	4413      	add	r3, r2
 8001fdc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fe0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d013      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	0c5b      	lsrs	r3, r3, #17
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002000:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002006:	fb02 f203 	mul.w	r2, r2, r3
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
 8002012:	e004      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	4a0b      	ldr	r2, [pc, #44]	; (8002044 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	623b      	str	r3, [r7, #32]
      break;
 8002022:	e002      	b.n	800202a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002026:	623b      	str	r3, [r7, #32]
      break;
 8002028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800202a:	6a3b      	ldr	r3, [r7, #32]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3728      	adds	r7, #40	; 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bc90      	pop	{r4, r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	08002fb0 	.word	0x08002fb0
 800203c:	40021000 	.word	0x40021000
 8002040:	007a1200 	.word	0x007a1200
 8002044:	003d0900 	.word	0x003d0900

08002048 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <RCC_Delay+0x34>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <RCC_Delay+0x38>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	0a5b      	lsrs	r3, r3, #9
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	fb02 f303 	mul.w	r3, r2, r3
 8002062:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002064:	bf00      	nop
  }
  while (Delay --);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1e5a      	subs	r2, r3, #1
 800206a:	60fa      	str	r2, [r7, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f9      	bne.n	8002064 <RCC_Delay+0x1c>
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	20000050 	.word	0x20000050
 8002080:	10624dd3 	.word	0x10624dd3

08002084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e041      	b.n	800211a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d106      	bne.n	80020b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7fe fe7a 	bl	8000da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3304      	adds	r3, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f000 fc28 	bl	8002918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d001      	beq.n	800213c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e03a      	b.n	80021b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a18      	ldr	r2, [pc, #96]	; (80021bc <HAL_TIM_Base_Start_IT+0x98>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00e      	beq.n	800217c <HAL_TIM_Base_Start_IT+0x58>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002166:	d009      	beq.n	800217c <HAL_TIM_Base_Start_IT+0x58>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d004      	beq.n	800217c <HAL_TIM_Base_Start_IT+0x58>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d111      	bne.n	80021a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b06      	cmp	r3, #6
 800218c:	d010      	beq.n	80021b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0201 	orr.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800219e:	e007      	b.n	80021b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40000400 	.word	0x40000400
 80021c4:	40000800 	.word	0x40000800

080021c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e041      	b.n	800225e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f839 	bl	8002266 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3304      	adds	r3, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4610      	mov	r0, r2
 8002208:	f000 fb86 	bl	8002918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d109      	bne.n	800229c <HAL_TIM_PWM_Start+0x24>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e022      	b.n	80022e2 <HAL_TIM_PWM_Start+0x6a>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d109      	bne.n	80022b6 <HAL_TIM_PWM_Start+0x3e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	bf14      	ite	ne
 80022ae:	2301      	movne	r3, #1
 80022b0:	2300      	moveq	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	e015      	b.n	80022e2 <HAL_TIM_PWM_Start+0x6a>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d109      	bne.n	80022d0 <HAL_TIM_PWM_Start+0x58>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	bf14      	ite	ne
 80022c8:	2301      	movne	r3, #1
 80022ca:	2300      	moveq	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	e008      	b.n	80022e2 <HAL_TIM_PWM_Start+0x6a>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	bf14      	ite	ne
 80022dc:	2301      	movne	r3, #1
 80022de:	2300      	moveq	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e05e      	b.n	80023a8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d104      	bne.n	80022fa <HAL_TIM_PWM_Start+0x82>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022f8:	e013      	b.n	8002322 <HAL_TIM_PWM_Start+0xaa>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d104      	bne.n	800230a <HAL_TIM_PWM_Start+0x92>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002308:	e00b      	b.n	8002322 <HAL_TIM_PWM_Start+0xaa>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b08      	cmp	r3, #8
 800230e:	d104      	bne.n	800231a <HAL_TIM_PWM_Start+0xa2>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002318:	e003      	b.n	8002322 <HAL_TIM_PWM_Start+0xaa>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2202      	movs	r2, #2
 800231e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2201      	movs	r2, #1
 8002328:	6839      	ldr	r1, [r7, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f000 fd74 	bl	8002e18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1e      	ldr	r2, [pc, #120]	; (80023b0 <HAL_TIM_PWM_Start+0x138>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d107      	bne.n	800234a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002348:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <HAL_TIM_PWM_Start+0x138>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d00e      	beq.n	8002372 <HAL_TIM_PWM_Start+0xfa>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235c:	d009      	beq.n	8002372 <HAL_TIM_PWM_Start+0xfa>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a14      	ldr	r2, [pc, #80]	; (80023b4 <HAL_TIM_PWM_Start+0x13c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d004      	beq.n	8002372 <HAL_TIM_PWM_Start+0xfa>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <HAL_TIM_PWM_Start+0x140>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d111      	bne.n	8002396 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b06      	cmp	r3, #6
 8002382:	d010      	beq.n	80023a6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002394:	e007      	b.n	80023a6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40012c00 	.word	0x40012c00
 80023b4:	40000400 	.word	0x40000400
 80023b8:	40000800 	.word	0x40000800

080023bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d122      	bne.n	8002418 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d11b      	bne.n	8002418 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0202 	mvn.w	r2, #2
 80023e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fa6f 	bl	80028e2 <HAL_TIM_IC_CaptureCallback>
 8002404:	e005      	b.n	8002412 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fa62 	bl	80028d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 fa71 	bl	80028f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b04      	cmp	r3, #4
 8002424:	d122      	bne.n	800246c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b04      	cmp	r3, #4
 8002432:	d11b      	bne.n	800246c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0204 	mvn.w	r2, #4
 800243c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2202      	movs	r2, #2
 8002442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fa45 	bl	80028e2 <HAL_TIM_IC_CaptureCallback>
 8002458:	e005      	b.n	8002466 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fa38 	bl	80028d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fa47 	bl	80028f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b08      	cmp	r3, #8
 8002478:	d122      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b08      	cmp	r3, #8
 8002486:	d11b      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f06f 0208 	mvn.w	r2, #8
 8002490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2204      	movs	r2, #4
 8002496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fa1b 	bl	80028e2 <HAL_TIM_IC_CaptureCallback>
 80024ac:	e005      	b.n	80024ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fa0e 	bl	80028d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fa1d 	bl	80028f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d122      	bne.n	8002514 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d11b      	bne.n	8002514 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0210 	mvn.w	r2, #16
 80024e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2208      	movs	r2, #8
 80024ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f9f1 	bl	80028e2 <HAL_TIM_IC_CaptureCallback>
 8002500:	e005      	b.n	800250e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f9e4 	bl	80028d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f9f3 	bl	80028f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b01      	cmp	r3, #1
 8002520:	d10e      	bne.n	8002540 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b01      	cmp	r3, #1
 800252e:	d107      	bne.n	8002540 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0201 	mvn.w	r2, #1
 8002538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe f9d6 	bl	80008ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254a:	2b80      	cmp	r3, #128	; 0x80
 800254c:	d10e      	bne.n	800256c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002558:	2b80      	cmp	r3, #128	; 0x80
 800255a:	d107      	bne.n	800256c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fce1 	bl	8002f2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002576:	2b40      	cmp	r3, #64	; 0x40
 8002578:	d10e      	bne.n	8002598 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002584:	2b40      	cmp	r3, #64	; 0x40
 8002586:	d107      	bne.n	8002598 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f9b7 	bl	8002906 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d107      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0220 	mvn.w	r2, #32
 80025bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fcac 	bl	8002f1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e0ac      	b.n	8002740 <HAL_TIM_PWM_ConfigChannel+0x174>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b0c      	cmp	r3, #12
 80025f2:	f200 809f 	bhi.w	8002734 <HAL_TIM_PWM_ConfigChannel+0x168>
 80025f6:	a201      	add	r2, pc, #4	; (adr r2, 80025fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80025f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fc:	08002631 	.word	0x08002631
 8002600:	08002735 	.word	0x08002735
 8002604:	08002735 	.word	0x08002735
 8002608:	08002735 	.word	0x08002735
 800260c:	08002671 	.word	0x08002671
 8002610:	08002735 	.word	0x08002735
 8002614:	08002735 	.word	0x08002735
 8002618:	08002735 	.word	0x08002735
 800261c:	080026b3 	.word	0x080026b3
 8002620:	08002735 	.word	0x08002735
 8002624:	08002735 	.word	0x08002735
 8002628:	08002735 	.word	0x08002735
 800262c:	080026f3 	.word	0x080026f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f9d0 	bl	80029dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0208 	orr.w	r2, r2, #8
 800264a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0204 	bic.w	r2, r2, #4
 800265a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6999      	ldr	r1, [r3, #24]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	619a      	str	r2, [r3, #24]
      break;
 800266e:	e062      	b.n	8002736 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	4618      	mov	r0, r3
 8002678:	f000 fa16 	bl	8002aa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800268a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800269a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6999      	ldr	r1, [r3, #24]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	021a      	lsls	r2, r3, #8
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	619a      	str	r2, [r3, #24]
      break;
 80026b0:	e041      	b.n	8002736 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fa5f 	bl	8002b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69da      	ldr	r2, [r3, #28]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0208 	orr.w	r2, r2, #8
 80026cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	69da      	ldr	r2, [r3, #28]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0204 	bic.w	r2, r2, #4
 80026dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69d9      	ldr	r1, [r3, #28]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	61da      	str	r2, [r3, #28]
      break;
 80026f0:	e021      	b.n	8002736 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 faa9 	bl	8002c50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69da      	ldr	r2, [r3, #28]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800270c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69da      	ldr	r2, [r3, #28]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69d9      	ldr	r1, [r3, #28]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	021a      	lsls	r2, r3, #8
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	61da      	str	r2, [r3, #28]
      break;
 8002732:	e000      	b.n	8002736 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002734:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_TIM_ConfigClockSource+0x18>
 800275c:	2302      	movs	r3, #2
 800275e:	e0b3      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x180>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800277e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002786:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002798:	d03e      	beq.n	8002818 <HAL_TIM_ConfigClockSource+0xd0>
 800279a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279e:	f200 8087 	bhi.w	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a6:	f000 8085 	beq.w	80028b4 <HAL_TIM_ConfigClockSource+0x16c>
 80027aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ae:	d87f      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027b0:	2b70      	cmp	r3, #112	; 0x70
 80027b2:	d01a      	beq.n	80027ea <HAL_TIM_ConfigClockSource+0xa2>
 80027b4:	2b70      	cmp	r3, #112	; 0x70
 80027b6:	d87b      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027b8:	2b60      	cmp	r3, #96	; 0x60
 80027ba:	d050      	beq.n	800285e <HAL_TIM_ConfigClockSource+0x116>
 80027bc:	2b60      	cmp	r3, #96	; 0x60
 80027be:	d877      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027c0:	2b50      	cmp	r3, #80	; 0x50
 80027c2:	d03c      	beq.n	800283e <HAL_TIM_ConfigClockSource+0xf6>
 80027c4:	2b50      	cmp	r3, #80	; 0x50
 80027c6:	d873      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d058      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x136>
 80027cc:	2b40      	cmp	r3, #64	; 0x40
 80027ce:	d86f      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027d0:	2b30      	cmp	r3, #48	; 0x30
 80027d2:	d064      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x156>
 80027d4:	2b30      	cmp	r3, #48	; 0x30
 80027d6:	d86b      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d060      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x156>
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d867      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d05c      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x156>
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	d05a      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027e8:	e062      	b.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6899      	ldr	r1, [r3, #8]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f000 faee 	bl	8002dda <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800280c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	609a      	str	r2, [r3, #8]
      break;
 8002816:	e04e      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6899      	ldr	r1, [r3, #8]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f000 fad7 	bl	8002dda <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800283a:	609a      	str	r2, [r3, #8]
      break;
 800283c:	e03b      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6859      	ldr	r1, [r3, #4]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	461a      	mov	r2, r3
 800284c:	f000 fa4e 	bl	8002cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2150      	movs	r1, #80	; 0x50
 8002856:	4618      	mov	r0, r3
 8002858:	f000 faa5 	bl	8002da6 <TIM_ITRx_SetConfig>
      break;
 800285c:	e02b      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6859      	ldr	r1, [r3, #4]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	461a      	mov	r2, r3
 800286c:	f000 fa6c 	bl	8002d48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2160      	movs	r1, #96	; 0x60
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fa95 	bl	8002da6 <TIM_ITRx_SetConfig>
      break;
 800287c:	e01b      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6859      	ldr	r1, [r3, #4]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	461a      	mov	r2, r3
 800288c:	f000 fa2e 	bl	8002cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2140      	movs	r1, #64	; 0x40
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fa85 	bl	8002da6 <TIM_ITRx_SetConfig>
      break;
 800289c:	e00b      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4619      	mov	r1, r3
 80028a8:	4610      	mov	r0, r2
 80028aa:	f000 fa7c 	bl	8002da6 <TIM_ITRx_SetConfig>
        break;
 80028ae:	e002      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028b0:	bf00      	nop
 80028b2:	e000      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a29      	ldr	r2, [pc, #164]	; (80029d0 <TIM_Base_SetConfig+0xb8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00b      	beq.n	8002948 <TIM_Base_SetConfig+0x30>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002936:	d007      	beq.n	8002948 <TIM_Base_SetConfig+0x30>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a26      	ldr	r2, [pc, #152]	; (80029d4 <TIM_Base_SetConfig+0xbc>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d003      	beq.n	8002948 <TIM_Base_SetConfig+0x30>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a25      	ldr	r2, [pc, #148]	; (80029d8 <TIM_Base_SetConfig+0xc0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d108      	bne.n	800295a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <TIM_Base_SetConfig+0xb8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00b      	beq.n	800297a <TIM_Base_SetConfig+0x62>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002968:	d007      	beq.n	800297a <TIM_Base_SetConfig+0x62>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a19      	ldr	r2, [pc, #100]	; (80029d4 <TIM_Base_SetConfig+0xbc>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d003      	beq.n	800297a <TIM_Base_SetConfig+0x62>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <TIM_Base_SetConfig+0xc0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d108      	bne.n	800298c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <TIM_Base_SetConfig+0xb8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d103      	bne.n	80029c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	615a      	str	r2, [r3, #20]
}
 80029c6:	bf00      	nop
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40000400 	.word	0x40000400
 80029d8:	40000800 	.word	0x40000800

080029dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	f023 0201 	bic.w	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0303 	bic.w	r3, r3, #3
 8002a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f023 0302 	bic.w	r3, r3, #2
 8002a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a1c      	ldr	r2, [pc, #112]	; (8002aa4 <TIM_OC1_SetConfig+0xc8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d10c      	bne.n	8002a52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f023 0308 	bic.w	r3, r3, #8
 8002a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f023 0304 	bic.w	r3, r3, #4
 8002a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a13      	ldr	r2, [pc, #76]	; (8002aa4 <TIM_OC1_SetConfig+0xc8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d111      	bne.n	8002a7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	621a      	str	r2, [r3, #32]
}
 8002a98:	bf00      	nop
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40012c00 	.word	0x40012c00

08002aa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	f023 0210 	bic.w	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f023 0320 	bic.w	r3, r3, #32
 8002af2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <TIM_OC2_SetConfig+0xd0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d10d      	bne.n	8002b24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <TIM_OC2_SetConfig+0xd0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d113      	bne.n	8002b54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	621a      	str	r2, [r3, #32]
}
 8002b6e:	bf00      	nop
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	40012c00 	.word	0x40012c00

08002b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0303 	bic.w	r3, r3, #3
 8002bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	; (8002c4c <TIM_OC3_SetConfig+0xd0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d10d      	bne.n	8002bf6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a14      	ldr	r2, [pc, #80]	; (8002c4c <TIM_OC3_SetConfig+0xd0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d113      	bne.n	8002c26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	621a      	str	r2, [r3, #32]
}
 8002c40:	bf00      	nop
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40012c00 	.word	0x40012c00

08002c50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	031b      	lsls	r3, r3, #12
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a0f      	ldr	r2, [pc, #60]	; (8002ce8 <TIM_OC4_SetConfig+0x98>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d109      	bne.n	8002cc4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	019b      	lsls	r3, r3, #6
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	621a      	str	r2, [r3, #32]
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	40012c00 	.word	0x40012c00

08002cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	f023 0201 	bic.w	r2, r3, #1
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f023 030a 	bic.w	r3, r3, #10
 8002d28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	621a      	str	r2, [r3, #32]
}
 8002d3e:	bf00      	nop
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f023 0210 	bic.w	r2, r3, #16
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	031b      	lsls	r3, r3, #12
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	621a      	str	r2, [r3, #32]
}
 8002d9c:	bf00      	nop
 8002d9e:	371c      	adds	r7, #28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f043 0307 	orr.w	r3, r3, #7
 8002dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	609a      	str	r2, [r3, #8]
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b087      	sub	sp, #28
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002df4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	021a      	lsls	r2, r3, #8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	609a      	str	r2, [r3, #8]
}
 8002e0e:	bf00      	nop
 8002e10:	371c      	adds	r7, #28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a1a      	ldr	r2, [r3, #32]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a1a      	ldr	r2, [r3, #32]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	431a      	orrs	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	621a      	str	r2, [r3, #32]
}
 8002e56:	bf00      	nop
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e046      	b.n	8002f06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a16      	ldr	r2, [pc, #88]	; (8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00e      	beq.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec4:	d009      	beq.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d004      	beq.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a10      	ldr	r2, [pc, #64]	; (8002f18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ee0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	40012c00 	.word	0x40012c00
 8002f14:	40000400 	.word	0x40000400
 8002f18:	40000800 	.word	0x40000800

08002f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr

08002f2e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <__libc_init_array>:
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	2600      	movs	r6, #0
 8002f44:	4d0c      	ldr	r5, [pc, #48]	; (8002f78 <__libc_init_array+0x38>)
 8002f46:	4c0d      	ldr	r4, [pc, #52]	; (8002f7c <__libc_init_array+0x3c>)
 8002f48:	1b64      	subs	r4, r4, r5
 8002f4a:	10a4      	asrs	r4, r4, #2
 8002f4c:	42a6      	cmp	r6, r4
 8002f4e:	d109      	bne.n	8002f64 <__libc_init_array+0x24>
 8002f50:	f000 f822 	bl	8002f98 <_init>
 8002f54:	2600      	movs	r6, #0
 8002f56:	4d0a      	ldr	r5, [pc, #40]	; (8002f80 <__libc_init_array+0x40>)
 8002f58:	4c0a      	ldr	r4, [pc, #40]	; (8002f84 <__libc_init_array+0x44>)
 8002f5a:	1b64      	subs	r4, r4, r5
 8002f5c:	10a4      	asrs	r4, r4, #2
 8002f5e:	42a6      	cmp	r6, r4
 8002f60:	d105      	bne.n	8002f6e <__libc_init_array+0x2e>
 8002f62:	bd70      	pop	{r4, r5, r6, pc}
 8002f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f68:	4798      	blx	r3
 8002f6a:	3601      	adds	r6, #1
 8002f6c:	e7ee      	b.n	8002f4c <__libc_init_array+0xc>
 8002f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f72:	4798      	blx	r3
 8002f74:	3601      	adds	r6, #1
 8002f76:	e7f2      	b.n	8002f5e <__libc_init_array+0x1e>
 8002f78:	08002fd0 	.word	0x08002fd0
 8002f7c:	08002fd0 	.word	0x08002fd0
 8002f80:	08002fd0 	.word	0x08002fd0
 8002f84:	08002fd4 	.word	0x08002fd4

08002f88 <memset>:
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4402      	add	r2, r0
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d100      	bne.n	8002f92 <memset+0xa>
 8002f90:	4770      	bx	lr
 8002f92:	f803 1b01 	strb.w	r1, [r3], #1
 8002f96:	e7f9      	b.n	8002f8c <memset+0x4>

08002f98 <_init>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	bf00      	nop
 8002f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9e:	bc08      	pop	{r3}
 8002fa0:	469e      	mov	lr, r3
 8002fa2:	4770      	bx	lr

08002fa4 <_fini>:
 8002fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa6:	bf00      	nop
 8002fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002faa:	bc08      	pop	{r3}
 8002fac:	469e      	mov	lr, r3
 8002fae:	4770      	bx	lr
